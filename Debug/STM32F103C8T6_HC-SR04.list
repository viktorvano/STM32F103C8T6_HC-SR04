
STM32F103C8T6_HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800467c  0800467c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800467c  0800467c  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800467c  0800467c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08004684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  200001a4  08004828  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  08004828  000213b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afe6  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003509  00000000  00000000  0003b1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cb35  00000000  00000000  0003e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f78  00000000  00000000  0004b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001198  00000000  00000000  0004c170  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001aad3  00000000  00000000  0004d308  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010561  00000000  00000000  00067ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008cdc9  00000000  00000000  0007833c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00105105  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028c8  00000000  00000000  00105180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a4 	.word	0x200001a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080045bc 	.word	0x080045bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a8 	.word	0x200001a8
 8000148:	080045bc 	.word	0x080045bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800015c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000160:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	2400      	movs	r4, #0
 8000164:	9404      	str	r4, [sp, #16]
 8000166:	9405      	str	r4, [sp, #20]
 8000168:	9406      	str	r4, [sp, #24]
 800016a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000174:	699a      	ldr	r2, [r3, #24]
 8000176:	f042 0220 	orr.w	r2, r2, #32
 800017a:	619a      	str	r2, [r3, #24]
 800017c:	699a      	ldr	r2, [r3, #24]
 800017e:	f002 0220 	and.w	r2, r2, #32
 8000182:	9201      	str	r2, [sp, #4]
 8000184:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	699a      	ldr	r2, [r3, #24]
 8000188:	f042 0204 	orr.w	r2, r2, #4
 800018c:	619a      	str	r2, [r3, #24]
 800018e:	699a      	ldr	r2, [r3, #24]
 8000190:	f002 0204 	and.w	r2, r2, #4
 8000194:	9202      	str	r2, [sp, #8]
 8000196:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000198:	699a      	ldr	r2, [r3, #24]
 800019a:	f042 0208 	orr.w	r2, r2, #8
 800019e:	619a      	str	r2, [r3, #24]
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f003 0308 	and.w	r3, r3, #8
 80001a6:	9303      	str	r3, [sp, #12]
 80001a8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger0_Pin|Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 80001aa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80001ae:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80001b2:	4622      	mov	r2, r4
 80001b4:	212a      	movs	r1, #42	; 0x2a
 80001b6:	4628      	mov	r0, r5
 80001b8:	f000 fbf6 	bl	80009a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_RESET);
 80001bc:	f44f 6640 	mov.w	r6, #3072	; 0xc00
 80001c0:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80001c4:	4622      	mov	r2, r4
 80001c6:	2108      	movs	r1, #8
 80001c8:	4630      	mov	r0, r6
 80001ca:	f000 fbed 	bl	80009a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trigger0_Pin Trigger1_Pin Trigger2_Pin */
  GPIO_InitStruct.Pin = Trigger0_Pin|Trigger1_Pin|Trigger2_Pin;
 80001ce:	232a      	movs	r3, #42	; 0x2a
 80001d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	f04f 0801 	mov.w	r8, #1
 80001d6:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001dc:	2703      	movs	r7, #3
 80001de:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e0:	a904      	add	r1, sp, #16
 80001e2:	4628      	mov	r0, r5
 80001e4:	f000 fac1 	bl	800076a <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo0_Pin Echo1_Pin Echo2_Pin */
  GPIO_InitStruct.Pin = Echo0_Pin|Echo1_Pin|Echo2_Pin;
 80001e8:	2354      	movs	r3, #84	; 0x54
 80001ea:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f0:	a904      	add	r1, sp, #16
 80001f2:	4628      	mov	r0, r5
 80001f4:	f000 fab9 	bl	800076a <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Enable_Pin */
  GPIO_InitStruct.Pin = USB_Enable_Pin;
 80001f8:	2308      	movs	r3, #8
 80001fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000202:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(USB_Enable_GPIO_Port, &GPIO_InitStruct);
 8000204:	a904      	add	r1, sp, #16
 8000206:	4630      	mov	r0, r6
 8000208:	f000 faaf 	bl	800076a <HAL_GPIO_Init>

}
 800020c:	b008      	add	sp, #32
 800020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000212 <MX_TIM2_Init>:
{
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000216:	2500      	movs	r5, #0
 8000218:	9502      	str	r5, [sp, #8]
 800021a:	9503      	str	r5, [sp, #12]
 800021c:	9504      	str	r5, [sp, #16]
 800021e:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000220:	9500      	str	r5, [sp, #0]
 8000222:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 8000224:	f240 34e8 	movw	r4, #1000	; 0x3e8
 8000228:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 72;
 8000232:	2348      	movs	r3, #72	; 0x48
 8000234:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000236:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 57;
 8000238:	2339      	movs	r3, #57	; 0x39
 800023a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800023c:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800023e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000240:	4620      	mov	r0, r4
 8000242:	f002 f873 	bl	800232c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800024c:	a902      	add	r1, sp, #8
 800024e:	4620      	mov	r0, r4
 8000250:	f002 f8a2 	bl	8002398 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000254:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000256:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000258:	4669      	mov	r1, sp
 800025a:	4620      	mov	r0, r4
 800025c:	f002 f909 	bl	8002472 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000260:	b007      	add	sp, #28
 8000262:	bd30      	pop	{r4, r5, pc}

08000264 <SystemClock_Config>:
{
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000268:	2400      	movs	r4, #0
 800026a:	940c      	str	r4, [sp, #48]	; 0x30
 800026c:	940d      	str	r4, [sp, #52]	; 0x34
 800026e:	940f      	str	r4, [sp, #60]	; 0x3c
 8000270:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	9405      	str	r4, [sp, #20]
 8000274:	9406      	str	r4, [sp, #24]
 8000276:	9407      	str	r4, [sp, #28]
 8000278:	9408      	str	r4, [sp, #32]
 800027a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	9401      	str	r4, [sp, #4]
 800027e:	9402      	str	r4, [sp, #8]
 8000280:	9403      	str	r4, [sp, #12]
 8000282:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	2201      	movs	r2, #1
 8000286:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2502      	movs	r5, #2
 8000292:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	a80a      	add	r0, sp, #40	; 0x28
 800029e:	f001 fa77 	bl	8001790 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002b0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	4629      	mov	r1, r5
 80002b4:	a805      	add	r0, sp, #20
 80002b6:	f001 fd25 	bl	8001d04 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	a801      	add	r0, sp, #4
 80002c2:	f001 fe00 	bl	8001ec6 <HAL_RCCEx_PeriphCLKConfig>
}
 80002c6:	b015      	add	sp, #84	; 0x54
 80002c8:	bd30      	pop	{r4, r5, pc}

080002ca <main>:
{
 80002ca:	b530      	push	{r4, r5, lr}
 80002cc:	b0b5      	sub	sp, #212	; 0xd4
  HAL_Init();
 80002ce:	f000 f9a4 	bl	800061a <HAL_Init>
  SystemClock_Config();
 80002d2:	f7ff ffc7 	bl	8000264 <SystemClock_Config>
  MX_GPIO_Init();
 80002d6:	f7ff ff41 	bl	800015c <MX_GPIO_Init>
  MX_TIM2_Init();
 80002da:	f7ff ff9a 	bl	8000212 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002de:	f003 fe83 	bl	8003fe8 <MX_USB_DEVICE_Init>
  HAL_Delay(500);
 80002e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e6:	f000 f9be 	bl	8000666 <HAL_Delay>
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80002f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002f6:	f000 fb57 	bl	80009a8 <HAL_GPIO_WritePin>
 80002fa:	e042      	b.n	8000382 <main+0xb8>
		  sensor = i;//update sensor index in timer2
 80002fc:	f240 13c2 	movw	r3, #450	; 0x1c2
 8000300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000304:	801c      	strh	r4, [r3, #0]
		  distancesInCm[i] = measureDistance(triggerPorts[i], triggerPins[i], echoPorts[i], echoPins[i]);
 8000306:	f240 0300 	movw	r3, #0
 800030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800030e:	f240 0208 	movw	r2, #8
 8000312:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000316:	f240 0114 	movw	r1, #20
 800031a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800031e:	f240 001c 	movw	r0, #28
 8000322:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000326:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800032a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800032e:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 8000332:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8000336:	f000 f850 	bl	80003da <measureDistance>
		  memset(number, 0, 8);
 800033a:	2300      	movs	r3, #0
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
		  itoa(distancesInCm[i], number, 10);
 8000340:	220a      	movs	r2, #10
 8000342:	4669      	mov	r1, sp
 8000344:	f004 f8e2 	bl	800450c <itoa>
		  strcat(message, number);
 8000348:	ad02      	add	r5, sp, #8
 800034a:	4669      	mov	r1, sp
 800034c:	4628      	mov	r0, r5
 800034e:	f004 f8e7 	bl	8004520 <strcat>
		  strcat(message, " cm\n");
 8000352:	4628      	mov	r0, r5
 8000354:	f7ff fefa 	bl	800014c <strlen>
 8000358:	4602      	mov	r2, r0
 800035a:	1829      	adds	r1, r5, r0
 800035c:	f244 6304 	movw	r3, #17924	; 0x4604
 8000360:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	50a8      	str	r0, [r5, r2]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	710b      	strb	r3, [r1, #4]
	  for(uint16_t i=0; i<3; i++)
 800036c:	3401      	adds	r4, #1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	2c02      	cmp	r4, #2
 8000372:	d9c3      	bls.n	80002fc <main+0x32>
	  CDC_Transmit_FS((uint8_t*)&message, strlen(message));
 8000374:	a802      	add	r0, sp, #8
 8000376:	f7ff fee9 	bl	800014c <strlen>
 800037a:	b281      	uxth	r1, r0
 800037c:	a802      	add	r0, sp, #8
 800037e:	f003 fe92 	bl	80040a6 <CDC_Transmit_FS>
	  HAL_Delay(900);
 8000382:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000386:	f000 f96e 	bl	8000666 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)&"\n\n\nMeasuring Distances...\n", strlen("\n\n\nMeasuring Distances...\n"));
 800038a:	211a      	movs	r1, #26
 800038c:	f244 50e8 	movw	r0, #17896	; 0x45e8
 8000390:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000394:	f003 fe87 	bl	80040a6 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8000398:	2064      	movs	r0, #100	; 0x64
 800039a:	f000 f964 	bl	8000666 <HAL_Delay>
	  memset(message, 0, 200);
 800039e:	22c8      	movs	r2, #200	; 0xc8
 80003a0:	2100      	movs	r1, #0
 80003a2:	a802      	add	r0, sp, #8
 80003a4:	f004 f8b4 	bl	8004510 <memset>
	  for(uint16_t i=0; i<3; i++)
 80003a8:	2400      	movs	r4, #0
 80003aa:	e7e1      	b.n	8000370 <main+0xa6>

080003ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003ac:	4770      	bx	lr

080003ae <SysTickEnable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ae:	b672      	cpsid	i
uint16_t echoPins[3] = {Echo0_Pin, Echo1_Pin, Echo2_Pin};

void SysTickEnable()
{
	__disable_irq();
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 80003b0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	f042 0205 	orr.w	r2, r2, #5
 80003be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003c0:	b662      	cpsie	i
	__enable_irq();
}
 80003c2:	4770      	bx	lr

080003c4 <SysTickDisable>:
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i

void SysTickDisable()
{
	__disable_irq();
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 80003c6:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	f022 0205 	bic.w	r2, r2, #5
 80003d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003d6:	b662      	cpsie	i
	__enable_irq();
}
 80003d8:	4770      	bx	lr

080003da <measureDistance>:

uint16_t measureDistance(GPIO_TypeDef *triggerPort, uint16_t triggerPin, GPIO_TypeDef *echoPort, uint16_t echoPin)
{
 80003da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003dc:	4606      	mov	r6, r0
 80003de:	460f      	mov	r7, r1
 80003e0:	4614      	mov	r4, r2
 80003e2:	461d      	mov	r5, r3
	SysTickDisable();
 80003e4:	f7ff ffee 	bl	80003c4 <SysTickDisable>
	HAL_TIM_Base_Start_IT(&htim2);
 80003e8:	f240 30e8 	movw	r0, #1000	; 0x3e8
 80003ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003f0:	f001 fe41 	bl	8002076 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	4639      	mov	r1, r7
 80003f8:	4630      	mov	r0, r6
 80003fa:	f000 fad5 	bl	80009a8 <HAL_GPIO_WritePin>
	triggerTime = 0;//reset the variable
 80003fe:	f240 13c4 	movw	r3, #452	; 0x1c4
 8000402:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000406:	2200      	movs	r2, #0
 8000408:	801a      	strh	r2, [r3, #0]
	asm ("nop");//to avoid program freezing
 800040a:	bf00      	nop
	while(triggerTime < TriggerDuration);
 800040c:	f240 13c4 	movw	r3, #452	; 0x1c4
 8000410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d9f8      	bls.n	800040c <measureDistance+0x32>
	HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	4639      	mov	r1, r7
 800041e:	4630      	mov	r0, r6
 8000420:	f000 fac2 	bl	80009a8 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(echoPort, echoPin));
 8000424:	4629      	mov	r1, r5
 8000426:	4620      	mov	r0, r4
 8000428:	f000 fab7 	bl	800099a <HAL_GPIO_ReadPin>
 800042c:	2800      	cmp	r0, #0
 800042e:	d0f9      	beq.n	8000424 <measureDistance+0x4a>
	distance = 0;//reset the variable
 8000430:	f240 13c0 	movw	r3, #448	; 0x1c0
 8000434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000438:	2200      	movs	r2, #0
 800043a:	801a      	strh	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(echoPort, echoPin));
 800043c:	4629      	mov	r1, r5
 800043e:	4620      	mov	r0, r4
 8000440:	f000 faab 	bl	800099a <HAL_GPIO_ReadPin>
 8000444:	2800      	cmp	r0, #0
 8000446:	d1f9      	bne.n	800043c <measureDistance+0x62>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000448:	f240 30e8 	movw	r0, #1000	; 0x3e8
 800044c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000450:	f001 fe49 	bl	80020e6 <HAL_TIM_Base_Stop_IT>
	SysTickEnable();
 8000454:	f7ff ffab 	bl	80003ae <SysTickEnable>
	return distance;
 8000458:	f240 13c0 	movw	r3, #448	; 0x1c0
 800045c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8000460:	8818      	ldrh	r0, [r3, #0]
 8000462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800046e:	699a      	ldr	r2, [r3, #24]
 8000470:	f042 0201 	orr.w	r2, r2, #1
 8000474:	619a      	str	r2, [r3, #24]
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	f002 0201 	and.w	r2, r2, #1
 800047c:	9200      	str	r2, [sp, #0]
 800047e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000486:	61da      	str	r2, [r3, #28]
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	2200      	movs	r2, #0
 8000494:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000498:	6853      	ldr	r3, [r2, #4]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a4:	b002      	add	sp, #8
 80004a6:	4770      	bx	lr

080004a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80004a8:	6803      	ldr	r3, [r0, #0]
 80004aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ae:	d000      	beq.n	80004b2 <HAL_TIM_Base_MspInit+0xa>
 80004b0:	4770      	bx	lr
{
 80004b2:	b500      	push	{lr}
 80004b4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004be:	69da      	ldr	r2, [r3, #28]
 80004c0:	f042 0201 	orr.w	r2, r2, #1
 80004c4:	61da      	str	r2, [r3, #28]
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	4611      	mov	r1, r2
 80004d4:	201c      	movs	r0, #28
 80004d6:	f000 f8ed 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004da:	201c      	movs	r0, #28
 80004dc:	f000 f920 	bl	8000720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004e0:	b003      	add	sp, #12
 80004e2:	f85d fb04 	ldr.w	pc, [sp], #4

080004e6 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004e6:	4770      	bx	lr

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	e7fe      	b.n	80004e8 <HardFault_Handler>

080004ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ea:	e7fe      	b.n	80004ea <MemManage_Handler>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	e7fe      	b.n	80004ec <BusFault_Handler>

080004ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ee:	e7fe      	b.n	80004ee <UsageFault_Handler>

080004f0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	4770      	bx	lr

080004f2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	4770      	bx	lr

080004f4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f8a2 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fc:	bd08      	pop	{r3, pc}

080004fe <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004fe:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000500:	f241 00c8 	movw	r0, #4296	; 0x10c8
 8000504:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000508:	f000 fef6 	bl	80012f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800050c:	bd08      	pop	{r3, pc}

0800050e <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800050e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(HAL_GPIO_ReadPin(echoPorts[sensor], echoPins[sensor]) && distance < 500)
 8000510:	f240 13c2 	movw	r3, #450	; 0x1c2
 8000514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000518:	8818      	ldrh	r0, [r3, #0]
 800051a:	f240 0200 	movw	r2, #0
 800051e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000522:	f240 0308 	movw	r3, #8
 8000526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800052a:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 800052e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000532:	f000 fa32 	bl	800099a <HAL_GPIO_ReadPin>
 8000536:	b168      	cbz	r0, 8000554 <TIM2_IRQHandler+0x46>
 8000538:	f240 13c0 	movw	r3, #448	; 0x1c0
 800053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000546:	d205      	bcs.n	8000554 <TIM2_IRQHandler+0x46>
		distance++;
 8000548:	f240 12c0 	movw	r2, #448	; 0x1c0
 800054c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000550:	3301      	adds	r3, #1
 8000552:	8013      	strh	r3, [r2, #0]
	if(triggerTime < TriggerDuration)
 8000554:	f240 13c4 	movw	r3, #452	; 0x1c4
 8000558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d906      	bls.n	8000570 <TIM2_IRQHandler+0x62>
		triggerTime++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000562:	f240 30e8 	movw	r0, #1000	; 0x3e8
 8000566:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800056a:	f001 fdda 	bl	8002122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800056e:	bd08      	pop	{r3, pc}
		triggerTime++;
 8000570:	f240 12c4 	movw	r2, #452	; 0x1c4
 8000574:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000578:	3301      	adds	r3, #1
 800057a:	8013      	strh	r3, [r2, #0]
 800057c:	e7f1      	b.n	8000562 <TIM2_IRQHandler+0x54>

0800057e <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000580:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000582:	e003      	b.n	800058c <LoopCopyDataInit>

08000584 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000586:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000588:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800058a:	3104      	adds	r1, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000590:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000592:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000594:	d3f6      	bcc.n	8000584 <CopyDataInit>
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000598:	e002      	b.n	80005a0 <LoopFillZerobss>

0800059a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800059c:	f842 3b04 	str.w	r3, [r2], #4

080005a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a4:	d3f9      	bcc.n	800059a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a6:	f7ff ffea 	bl	800057e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005aa:	f003 ff73 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe8c 	bl	80002ca <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r3, =_sidata
 80005b4:	08004684 	.word	0x08004684
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005bc:	200001a4 	.word	0x200001a4
  ldr r2, =_sbss
 80005c0:	200001a4 	.word	0x200001a4
  ldr r3, = _ebss
 80005c4:	200013b4 	.word	0x200013b4

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>

080005ca <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ca:	b510      	push	{r4, lr}
 80005cc:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ce:	f240 032c 	movw	r3, #44	; 0x2c
 80005d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d6:	7818      	ldrb	r0, [r3, #0]
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e0:	f240 0228 	movw	r2, #40	; 0x28
 80005e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80005e8:	6810      	ldr	r0, [r2, #0]
 80005ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ee:	f000 f8a5 	bl	800073c <HAL_SYSTICK_Config>
 80005f2:	b980      	cbnz	r0, 8000616 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f4:	2c0f      	cmp	r4, #15
 80005f6:	d901      	bls.n	80005fc <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
 80005fa:	e00d      	b.n	8000618 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	4621      	mov	r1, r4
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f856 	bl	80006b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	f240 0330 	movw	r3, #48	; 0x30
 800060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000610:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2000      	movs	r0, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
}
 8000618:	bd10      	pop	{r4, pc}

0800061a <HAL_Init>:
{
 800061a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	f042 0210 	orr.w	r2, r2, #16
 800062a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f82e 	bl	800068e <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ffc9 	bl	80005ca <HAL_InitTick>
  HAL_MspInit();
 8000638:	f7ff ff14 	bl	8000464 <HAL_MspInit>
}
 800063c:	2000      	movs	r0, #0
 800063e:	bd08      	pop	{r3, pc}

08000640 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000640:	f240 4330 	movw	r3, #1072	; 0x430
 8000644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f240 012c 	movw	r1, #44	; 0x2c
 800064e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000652:	780a      	ldrb	r2, [r1, #0]
 8000654:	4402      	add	r2, r0
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	4770      	bx	lr

0800065a <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800065a:	f240 4330 	movw	r3, #1072	; 0x430
 800065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000662:	6818      	ldr	r0, [r3, #0]
}
 8000664:	4770      	bx	lr

08000666 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000666:	b538      	push	{r3, r4, r5, lr}
 8000668:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800066a:	f7ff fff6 	bl	800065a <HAL_GetTick>
 800066e:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000670:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000674:	d005      	beq.n	8000682 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8000676:	f240 032c 	movw	r3, #44	; 0x2c
 800067a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000682:	f7ff ffea 	bl	800065a <HAL_GetTick>
 8000686:	1b40      	subs	r0, r0, r5
 8000688:	42a0      	cmp	r0, r4
 800068a:	d3fa      	bcc.n	8000682 <HAL_Delay+0x1c>
  {
  }
}
 800068c:	bd38      	pop	{r3, r4, r5, pc}

0800068e <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000692:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000696:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000698:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800069c:	041b      	lsls	r3, r3, #16
 800069e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a0:	0200      	lsls	r0, r0, #8
 80006a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80006a8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80006ac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006b2:	4770      	bx	lr

080006b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	f1c3 0407 	rsb	r4, r3, #7
 80006c8:	2c04      	cmp	r4, #4
 80006ca:	bf28      	it	cs
 80006cc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d1d      	adds	r5, r3, #4
 80006d0:	2d06      	cmp	r5, #6
 80006d2:	d918      	bls.n	8000706 <HAL_NVIC_SetPriority+0x52>
 80006d4:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d6:	f04f 35ff 	mov.w	r5, #4294967295
 80006da:	fa05 f404 	lsl.w	r4, r5, r4
 80006de:	ea21 0104 	bic.w	r1, r1, r4
 80006e2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	fa05 f303 	lsl.w	r3, r5, r3
 80006e8:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80006ee:	2800      	cmp	r0, #0
 80006f0:	db0b      	blt.n	800070a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	0109      	lsls	r1, r1, #4
 80006f4:	b2c9      	uxtb	r1, r1
 80006f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000702:	bc30      	pop	{r4, r5}
 8000704:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	2300      	movs	r3, #0
 8000708:	e7e5      	b.n	80006d6 <HAL_NVIC_SetPriority+0x22>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	f000 000f 	and.w	r0, r0, #15
 800070e:	0109      	lsls	r1, r1, #4
 8000710:	b2c9      	uxtb	r1, r1
 8000712:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8000716:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800071a:	4403      	add	r3, r0
 800071c:	7619      	strb	r1, [r3, #24]
 800071e:	e7f0      	b.n	8000702 <HAL_NVIC_SetPriority+0x4e>

08000720 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000720:	2800      	cmp	r0, #0
 8000722:	db0a      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000724:	f000 031f 	and.w	r3, r0, #31
 8000728:	0940      	lsrs	r0, r0, #5
 800072a:	2201      	movs	r2, #1
 800072c:	409a      	lsls	r2, r3
 800072e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000732:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000736:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr

0800073c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	3801      	subs	r0, #1
 800073e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000742:	d210      	bcs.n	8000766 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000748:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800074c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000752:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000756:	21f0      	movs	r1, #240	; 0xf0
 8000758:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	2000      	movs	r0, #0
 800075e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr

0800076a <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076a:	b4f0      	push	{r4, r5, r6, r7}
 800076c:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800076e:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8000770:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000772:	e0cd      	b.n	8000910 <HAL_GPIO_Init+0x1a6>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000774:	2d00      	cmp	r5, #0
 8000776:	d077      	beq.n	8000868 <HAL_GPIO_Init+0xfe>
 8000778:	2d01      	cmp	r5, #1
 800077a:	d100      	bne.n	800077e <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800077c:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800077e:	2bff      	cmp	r3, #255	; 0xff
 8000780:	f200 8086 	bhi.w	8000890 <HAL_GPIO_Init+0x126>
 8000784:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000786:	2bff      	cmp	r3, #255	; 0xff
 8000788:	f200 8085 	bhi.w	8000896 <HAL_GPIO_Init+0x12c>
 800078c:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800078e:	f8dc 4000 	ldr.w	r4, [ip]
 8000792:	270f      	movs	r7, #15
 8000794:	40af      	lsls	r7, r5
 8000796:	ea24 0407 	bic.w	r4, r4, r7
 800079a:	fa06 f505 	lsl.w	r5, r6, r5
 800079e:	432c      	orrs	r4, r5
 80007a0:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007a4:	684c      	ldr	r4, [r1, #4]
 80007a6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80007aa:	f000 80b0 	beq.w	800090e <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80007b2:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80007b6:	69a5      	ldr	r5, [r4, #24]
 80007b8:	f045 0501 	orr.w	r5, r5, #1
 80007bc:	61a5      	str	r5, [r4, #24]
 80007be:	69a4      	ldr	r4, [r4, #24]
 80007c0:	f004 0401 	and.w	r4, r4, #1
 80007c4:	9401      	str	r4, [sp, #4]
 80007c6:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80007c8:	0895      	lsrs	r5, r2, #2
 80007ca:	2400      	movs	r4, #0
 80007cc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80007d0:	1caf      	adds	r7, r5, #2
 80007d2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007d6:	f002 0703 	and.w	r7, r2, #3
 80007da:	00bf      	lsls	r7, r7, #2
 80007dc:	f04f 0c0f 	mov.w	ip, #15
 80007e0:	fa0c fc07 	lsl.w	ip, ip, r7
 80007e4:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007e8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80007ec:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80007f0:	42a0      	cmp	r0, r4
 80007f2:	d056      	beq.n	80008a2 <HAL_GPIO_Init+0x138>
 80007f4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 80007f8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80007fc:	42a0      	cmp	r0, r4
 80007fe:	f000 80a1 	beq.w	8000944 <HAL_GPIO_Init+0x1da>
 8000802:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000806:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800080a:	42a0      	cmp	r0, r4
 800080c:	f000 809c 	beq.w	8000948 <HAL_GPIO_Init+0x1de>
 8000810:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8000814:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000818:	42a0      	cmp	r0, r4
 800081a:	d040      	beq.n	800089e <HAL_GPIO_Init+0x134>
 800081c:	2404      	movs	r4, #4
 800081e:	e041      	b.n	80008a4 <HAL_GPIO_Init+0x13a>
      switch (GPIO_Init->Mode)
 8000820:	2700      	movs	r7, #0
 8000822:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8000826:	42bd      	cmp	r5, r7
 8000828:	d01e      	beq.n	8000868 <HAL_GPIO_Init+0xfe>
 800082a:	2700      	movs	r7, #0
 800082c:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8000830:	42bd      	cmp	r5, r7
 8000832:	d90f      	bls.n	8000854 <HAL_GPIO_Init+0xea>
 8000834:	2700      	movs	r7, #0
 8000836:	f2c1 0731 	movt	r7, #4145	; 0x1031
 800083a:	42bd      	cmp	r5, r7
 800083c:	d014      	beq.n	8000868 <HAL_GPIO_Init+0xfe>
 800083e:	2700      	movs	r7, #0
 8000840:	f2c1 0732 	movt	r7, #4146	; 0x1032
 8000844:	42bd      	cmp	r5, r7
 8000846:	d00f      	beq.n	8000868 <HAL_GPIO_Init+0xfe>
 8000848:	2700      	movs	r7, #0
 800084a:	f2c1 0722 	movt	r7, #4130	; 0x1022
 800084e:	42bd      	cmp	r5, r7
 8000850:	d195      	bne.n	800077e <HAL_GPIO_Init+0x14>
 8000852:	e009      	b.n	8000868 <HAL_GPIO_Init+0xfe>
 8000854:	2700      	movs	r7, #0
 8000856:	f2c1 0711 	movt	r7, #4113	; 0x1011
 800085a:	42bd      	cmp	r5, r7
 800085c:	d004      	beq.n	8000868 <HAL_GPIO_Init+0xfe>
 800085e:	2700      	movs	r7, #0
 8000860:	f2c1 0712 	movt	r7, #4114	; 0x1012
 8000864:	42bd      	cmp	r5, r7
 8000866:	d18a      	bne.n	800077e <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000868:	688d      	ldr	r5, [r1, #8]
 800086a:	b17d      	cbz	r5, 800088c <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800086c:	2d01      	cmp	r5, #1
 800086e:	d008      	beq.n	8000882 <HAL_GPIO_Init+0x118>
            GPIOx->BRR = ioposition;
 8000870:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000872:	2608      	movs	r6, #8
 8000874:	e783      	b.n	800077e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000876:	68ce      	ldr	r6, [r1, #12]
 8000878:	3608      	adds	r6, #8
          break;
 800087a:	e780      	b.n	800077e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800087c:	68ce      	ldr	r6, [r1, #12]
 800087e:	360c      	adds	r6, #12
          break;
 8000880:	e77d      	b.n	800077e <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000882:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000884:	2608      	movs	r6, #8
 8000886:	e77a      	b.n	800077e <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000888:	2600      	movs	r6, #0
 800088a:	e778      	b.n	800077e <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800088c:	2604      	movs	r6, #4
 800088e:	e776      	b.n	800077e <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000890:	f100 0c04 	add.w	ip, r0, #4
 8000894:	e777      	b.n	8000786 <HAL_GPIO_Init+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000896:	f1a2 0508 	sub.w	r5, r2, #8
 800089a:	00ad      	lsls	r5, r5, #2
 800089c:	e777      	b.n	800078e <HAL_GPIO_Init+0x24>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800089e:	2403      	movs	r4, #3
 80008a0:	e000      	b.n	80008a4 <HAL_GPIO_Init+0x13a>
 80008a2:	2400      	movs	r4, #0
 80008a4:	40bc      	lsls	r4, r7
 80008a6:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80008aa:	2700      	movs	r7, #0
 80008ac:	f2c4 0701 	movt	r7, #16385	; 0x4001
 80008b0:	3502      	adds	r5, #2
 80008b2:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b6:	684c      	ldr	r4, [r1, #4]
 80008b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80008bc:	d046      	beq.n	800094c <HAL_GPIO_Init+0x1e2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008c2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80008c6:	6825      	ldr	r5, [r4, #0]
 80008c8:	431d      	orrs	r5, r3
 80008ca:	6025      	str	r5, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008cc:	684c      	ldr	r4, [r1, #4]
 80008ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80008d2:	d044      	beq.n	800095e <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80008dc:	6865      	ldr	r5, [r4, #4]
 80008de:	431d      	orrs	r5, r3
 80008e0:	6065      	str	r5, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e2:	684c      	ldr	r4, [r1, #4]
 80008e4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80008e8:	d042      	beq.n	8000970 <HAL_GPIO_Init+0x206>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008ee:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80008f2:	68a5      	ldr	r5, [r4, #8]
 80008f4:	431d      	orrs	r5, r3
 80008f6:	60a5      	str	r5, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f8:	684c      	ldr	r4, [r1, #4]
 80008fa:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80008fe:	d040      	beq.n	8000982 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000900:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000904:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000908:	68e5      	ldr	r5, [r4, #12]
 800090a:	432b      	orrs	r3, r5
 800090c:	60e3      	str	r3, [r4, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800090e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000910:	680b      	ldr	r3, [r1, #0]
 8000912:	fa33 f402 	lsrs.w	r4, r3, r2
 8000916:	d03d      	beq.n	8000994 <HAL_GPIO_Init+0x22a>
    ioposition = (0x01uL << position);
 8000918:	2401      	movs	r4, #1
 800091a:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091c:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 800091e:	429c      	cmp	r4, r3
 8000920:	d1f5      	bne.n	800090e <HAL_GPIO_Init+0x1a4>
      switch (GPIO_Init->Mode)
 8000922:	684d      	ldr	r5, [r1, #4]
 8000924:	2d12      	cmp	r5, #18
 8000926:	d0a9      	beq.n	800087c <HAL_GPIO_Init+0x112>
 8000928:	f63f af7a 	bhi.w	8000820 <HAL_GPIO_Init+0xb6>
 800092c:	2d02      	cmp	r5, #2
 800092e:	d0a2      	beq.n	8000876 <HAL_GPIO_Init+0x10c>
 8000930:	f67f af20 	bls.w	8000774 <HAL_GPIO_Init+0xa>
 8000934:	2d03      	cmp	r5, #3
 8000936:	d0a7      	beq.n	8000888 <HAL_GPIO_Init+0x11e>
 8000938:	2d11      	cmp	r5, #17
 800093a:	f47f af20 	bne.w	800077e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093e:	68ce      	ldr	r6, [r1, #12]
 8000940:	3604      	adds	r6, #4
          break;
 8000942:	e71c      	b.n	800077e <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000944:	2401      	movs	r4, #1
 8000946:	e7ad      	b.n	80008a4 <HAL_GPIO_Init+0x13a>
 8000948:	2402      	movs	r4, #2
 800094a:	e7ab      	b.n	80008a4 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800094c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000950:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000954:	6825      	ldr	r5, [r4, #0]
 8000956:	ea25 0503 	bic.w	r5, r5, r3
 800095a:	6025      	str	r5, [r4, #0]
 800095c:	e7b6      	b.n	80008cc <HAL_GPIO_Init+0x162>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800095e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000962:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000966:	6865      	ldr	r5, [r4, #4]
 8000968:	ea25 0503 	bic.w	r5, r5, r3
 800096c:	6065      	str	r5, [r4, #4]
 800096e:	e7b8      	b.n	80008e2 <HAL_GPIO_Init+0x178>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000970:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000974:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000978:	68a5      	ldr	r5, [r4, #8]
 800097a:	ea25 0503 	bic.w	r5, r5, r3
 800097e:	60a5      	str	r5, [r4, #8]
 8000980:	e7ba      	b.n	80008f8 <HAL_GPIO_Init+0x18e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000982:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000986:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800098a:	68e5      	ldr	r5, [r4, #12]
 800098c:	ea25 0303 	bic.w	r3, r5, r3
 8000990:	60e3      	str	r3, [r4, #12]
 8000992:	e7bc      	b.n	800090e <HAL_GPIO_Init+0x1a4>
  }
}
 8000994:	b002      	add	sp, #8
 8000996:	bcf0      	pop	{r4, r5, r6, r7}
 8000998:	4770      	bx	lr

0800099a <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800099a:	6883      	ldr	r3, [r0, #8]
 800099c:	4219      	tst	r1, r3
 800099e:	d101      	bne.n	80009a4 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80009a0:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80009a2:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80009a4:	2001      	movs	r0, #1
 80009a6:	4770      	bx	lr

080009a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a8:	b912      	cbnz	r2, 80009b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009aa:	0409      	lsls	r1, r1, #16
 80009ac:	6101      	str	r1, [r0, #16]
  }
}
 80009ae:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80009b0:	6101      	str	r1, [r0, #16]
 80009b2:	4770      	bx	lr

080009b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80009b6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80009ba:	d042      	beq.n	8000a42 <HAL_PCD_EP_DB_Receive+0x8e>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009bc:	6804      	ldr	r4, [r0, #0]
 80009be:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80009c2:	780d      	ldrb	r5, [r1, #0]
 80009c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80009c8:	3302      	adds	r3, #2
 80009ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80009ce:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 80009d2:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80009d6:	698b      	ldr	r3, [r1, #24]
 80009d8:	42a3      	cmp	r3, r4
 80009da:	d328      	bcc.n	8000a2e <HAL_PCD_EP_DB_Receive+0x7a>
    {
      ep->xfer_len -= count;
 80009dc:	1b1b      	subs	r3, r3, r4
 80009de:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80009e0:	698b      	ldr	r3, [r1, #24]
 80009e2:	b97b      	cbnz	r3, 8000a04 <HAL_PCD_EP_DB_Receive+0x50>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80009e4:	6806      	ldr	r6, [r0, #0]
 80009e6:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80009f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000a04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000a08:	d00e      	beq.n	8000a28 <HAL_PCD_EP_DB_Receive+0x74>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000a0a:	6802      	ldr	r2, [r0, #0]
 8000a0c:	780d      	ldrb	r5, [r1, #0]
 8000a0e:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a24:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8000a28:	b924      	cbnz	r4, 8000a34 <HAL_PCD_EP_DB_Receive+0x80>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	618b      	str	r3, [r1, #24]
 8000a32:	e7d5      	b.n	80009e0 <HAL_PCD_EP_DB_Receive+0x2c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000a34:	4623      	mov	r3, r4
 8000a36:	890a      	ldrh	r2, [r1, #8]
 8000a38:	6949      	ldr	r1, [r1, #20]
 8000a3a:	6800      	ldr	r0, [r0, #0]
 8000a3c:	f002 fc2f 	bl	800329e <USB_ReadPMA>
 8000a40:	e7f3      	b.n	8000a2a <HAL_PCD_EP_DB_Receive+0x76>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000a42:	6804      	ldr	r4, [r0, #0]
 8000a44:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8000a48:	780d      	ldrb	r5, [r1, #0]
 8000a4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000a4e:	3306      	adds	r3, #6
 8000a50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000a54:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8000a58:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8000a5c:	698b      	ldr	r3, [r1, #24]
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	d32e      	bcc.n	8000ac0 <HAL_PCD_EP_DB_Receive+0x10c>
      ep->xfer_len -= count;
 8000a62:	1b1b      	subs	r3, r3, r4
 8000a64:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8000a66:	698b      	ldr	r3, [r1, #24]
 8000a68:	b97b      	cbnz	r3, 8000a8a <HAL_PCD_EP_DB_Receive+0xd6>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000a6a:	6806      	ldr	r6, [r0, #0]
 8000a6c:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a86:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000a8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000a8e:	d10e      	bne.n	8000aae <HAL_PCD_EP_DB_Receive+0xfa>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000a90:	6802      	ldr	r2, [r0, #0]
 8000a92:	780d      	ldrb	r5, [r1, #0]
 8000a94:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000aaa:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d0bb      	beq.n	8000a2a <HAL_PCD_EP_DB_Receive+0x76>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	894a      	ldrh	r2, [r1, #10]
 8000ab6:	6949      	ldr	r1, [r1, #20]
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	f002 fbf0 	bl	800329e <USB_ReadPMA>
 8000abe:	e7b4      	b.n	8000a2a <HAL_PCD_EP_DB_Receive+0x76>
      ep->xfer_len = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	618b      	str	r3, [r1, #24]
 8000ac4:	e7cf      	b.n	8000a66 <HAL_PCD_EP_DB_Receive+0xb2>

08000ac6 <HAL_PCD_Init>:
{
 8000ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac8:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d07f      	beq.n	8000bce <HAL_PCD_Init+0x108>
 8000ace:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ad0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000ad4:	b1d3      	cbz	r3, 8000b0c <HAL_PCD_Init+0x46>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f001 fd13 	bl	8002508 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ae2:	4625      	mov	r5, r4
 8000ae4:	f855 7b10 	ldr.w	r7, [r5], #16
 8000ae8:	466e      	mov	r6, sp
 8000aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	6033      	str	r3, [r6, #0]
 8000af2:	1d23      	adds	r3, r4, #4
 8000af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000af6:	4638      	mov	r0, r7
 8000af8:	f001 fcf6 	bl	80024e8 <USB_CoreInit>
 8000afc:	b158      	cbz	r0, 8000b16 <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000b04:	2501      	movs	r5, #1
}
 8000b06:	4628      	mov	r0, r5
 8000b08:	b007      	add	sp, #28
 8000b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000b0c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000b10:	f003 fba6 	bl	8004260 <HAL_PCD_MspInit>
 8000b14:	e7df      	b.n	8000ad6 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b16:	2100      	movs	r1, #0
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	f001 fcff 	bl	800251c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e01a      	b.n	8000b58 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8000b22:	1c58      	adds	r0, r3, #1
 8000b24:	0081      	lsls	r1, r0, #2
 8000b26:	180d      	adds	r5, r1, r0
 8000b28:	00ea      	lsls	r2, r5, #3
 8000b2a:	4422      	add	r2, r4
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	7055      	strb	r5, [r2, #1]
    hpcd->IN_ep[i].num = i;
 8000b30:	180d      	adds	r5, r1, r0
 8000b32:	00ea      	lsls	r2, r5, #3
 8000b34:	54a3      	strb	r3, [r4, r2]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b36:	009d      	lsls	r5, r3, #2
 8000b38:	18ee      	adds	r6, r5, r3
 8000b3a:	00f2      	lsls	r2, r6, #3
 8000b3c:	4422      	add	r2, r4
 8000b3e:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b40:	4401      	add	r1, r0
 8000b42:	00ce      	lsls	r6, r1, #3
 8000b44:	4426      	add	r6, r4
 8000b46:	2100      	movs	r1, #0
 8000b48:	70f1      	strb	r1, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b4a:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b4c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b4e:	442b      	add	r3, r5
 8000b50:	00da      	lsls	r2, r3, #3
 8000b52:	4422      	add	r2, r4
 8000b54:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b56:	b2c3      	uxtb	r3, r0
 8000b58:	6865      	ldr	r5, [r4, #4]
 8000b5a:	42ab      	cmp	r3, r5
 8000b5c:	d3e1      	bcc.n	8000b22 <HAL_PCD_Init+0x5c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e015      	b.n	8000b8e <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8000b62:	0098      	lsls	r0, r3, #2
 8000b64:	18c1      	adds	r1, r0, r3
 8000b66:	00ca      	lsls	r2, r1, #3
 8000b68:	4422      	add	r2, r4
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000b70:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b74:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b78:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b7c:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b80:	18c2      	adds	r2, r0, r3
 8000b82:	00d0      	lsls	r0, r2, #3
 8000b84:	4420      	add	r0, r4
 8000b86:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	429d      	cmp	r5, r3
 8000b90:	d8e7      	bhi.n	8000b62 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b92:	4625      	mov	r5, r4
 8000b94:	f855 7b10 	ldr.w	r7, [r5], #16
 8000b98:	466e      	mov	r6, sp
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b9e:	682b      	ldr	r3, [r5, #0]
 8000ba0:	6033      	str	r3, [r6, #0]
 8000ba2:	1d23      	adds	r3, r4, #4
 8000ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f001 fcba 	bl	8002520 <USB_DevInit>
 8000bac:	4605      	mov	r5, r0
 8000bae:	b120      	cbz	r0, 8000bba <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	e7a5      	b.n	8000b06 <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000bc6:	6820      	ldr	r0, [r4, #0]
 8000bc8:	f001 ffbd 	bl	8002b46 <USB_DevDisconnect>
  return HAL_OK;
 8000bcc:	e79b      	b.n	8000b06 <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 8000bce:	2501      	movs	r5, #1
 8000bd0:	e799      	b.n	8000b06 <HAL_PCD_Init+0x40>

08000bd2 <HAL_PCD_Start>:
{
 8000bd2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000bd4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d011      	beq.n	8000c00 <HAL_PCD_Start+0x2e>
 8000bdc:	4604      	mov	r4, r0
 8000bde:	2501      	movs	r5, #1
 8000be0:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000be4:	6800      	ldr	r0, [r0, #0]
 8000be6:	f001 fc86 	bl	80024f6 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000bea:	4629      	mov	r1, r5
 8000bec:	4620      	mov	r0, r4
 8000bee:	f003 fc50 	bl	8004492 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8000bf2:	6820      	ldr	r0, [r4, #0]
 8000bf4:	f001 ffa5 	bl	8002b42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c00:	2002      	movs	r0, #2
 8000c02:	e7fc      	b.n	8000bfe <HAL_PCD_Start+0x2c>

08000c04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	4605      	mov	r5, r0
 8000c08:	460c      	mov	r4, r1
 8000c0a:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000c0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c10:	f000 80b4 	beq.w	8000d7c <HAL_PCD_EP_DB_Transmit+0x178>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c14:	6802      	ldr	r2, [r0, #0]
 8000c16:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c1a:	7809      	ldrb	r1, [r1, #0]
 8000c1c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000c20:	3302      	adds	r3, #2
 8000c22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c26:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8000c2a:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8000c2e:	69a3      	ldr	r3, [r4, #24]
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d92b      	bls.n	8000c8c <HAL_PCD_EP_DB_Transmit+0x88>
    {
      ep->xfer_len -= TxByteNbre;
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000c38:	69a3      	ldr	r3, [r4, #24]
 8000c3a:	b353      	cbz	r3, 8000c92 <HAL_PCD_EP_DB_Transmit+0x8e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c3c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000c40:	d00d      	beq.n	8000c5e <HAL_PCD_EP_DB_Transmit+0x5a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000c42:	6828      	ldr	r0, [r5, #0]
 8000c44:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8000c5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d02b      	beq.n	8000cbe <HAL_PCD_EP_DB_Transmit+0xba>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000c66:	682a      	ldr	r2, [r5, #0]
 8000c68:	7821      	ldrb	r1, [r4, #0]
 8000c6a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c78:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8000c88:	2000      	movs	r0, #0
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61a3      	str	r3, [r4, #24]
 8000c90:	e7d2      	b.n	8000c38 <HAL_PCD_EP_DB_Transmit+0x34>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c92:	4628      	mov	r0, r5
 8000c94:	f003 fb1a 	bl	80042cc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c98:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000c9c:	d0e3      	beq.n	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000c9e:	682a      	ldr	r2, [r5, #0]
 8000ca0:	7821      	ldrb	r1, [r4, #0]
 8000ca2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000cbc:	e7d3      	b.n	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 8000cbe:	6963      	ldr	r3, [r4, #20]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8000cc4:	69e3      	ldr	r3, [r4, #28]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000cca:	6a21      	ldr	r1, [r4, #32]
 8000ccc:	6923      	ldr	r3, [r4, #16]
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d31b      	bcc.n	8000d0a <HAL_PCD_EP_DB_Transmit+0x106>
          ep->xfer_len_db -= len;
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000cd6:	7862      	ldrb	r2, [r4, #1]
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d13b      	bne.n	8000d54 <HAL_PCD_EP_DB_Transmit+0x150>
 8000cdc:	682a      	ldr	r2, [r5, #0]
 8000cde:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000ce2:	440a      	add	r2, r1
 8000ce4:	7821      	ldrb	r1, [r4, #0]
 8000ce6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000cea:	b9d3      	cbnz	r3, 8000d22 <HAL_PCD_EP_DB_Transmit+0x11e>
 8000cec:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8000cf0:	b289      	uxth	r1, r1
 8000cf2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000cf6:	b289      	uxth	r1, r1
 8000cf8:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000cfc:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8000d00:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000d04:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d08:	e026      	b.n	8000d58 <HAL_PCD_EP_DB_Transmit+0x154>
        else if (ep->xfer_len_db == 0U)
 8000d0a:	b921      	cbnz	r1, 8000d16 <HAL_PCD_EP_DB_Transmit+0x112>
          ep->xfer_fill_db = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8000d12:	4613      	mov	r3, r2
 8000d14:	e7df      	b.n	8000cd6 <HAL_PCD_EP_DB_Transmit+0xd2>
          ep->xfer_fill_db = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8000d1c:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8000d1e:	460b      	mov	r3, r1
 8000d20:	e7d9      	b.n	8000cd6 <HAL_PCD_EP_DB_Transmit+0xd2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d22:	2b3e      	cmp	r3, #62	; 0x3e
 8000d24:	d809      	bhi.n	8000d3a <HAL_PCD_EP_DB_Transmit+0x136>
 8000d26:	0859      	lsrs	r1, r3, #1
 8000d28:	f013 0f01 	tst.w	r3, #1
 8000d2c:	d000      	beq.n	8000d30 <HAL_PCD_EP_DB_Transmit+0x12c>
 8000d2e:	3101      	adds	r1, #1
 8000d30:	0289      	lsls	r1, r1, #10
 8000d32:	b289      	uxth	r1, r1
 8000d34:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d38:	e00e      	b.n	8000d58 <HAL_PCD_EP_DB_Transmit+0x154>
 8000d3a:	0959      	lsrs	r1, r3, #5
 8000d3c:	f013 0f1f 	tst.w	r3, #31
 8000d40:	d100      	bne.n	8000d44 <HAL_PCD_EP_DB_Transmit+0x140>
 8000d42:	3901      	subs	r1, #1
 8000d44:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8000d48:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000d4c:	b289      	uxth	r1, r1
 8000d4e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d52:	e001      	b.n	8000d58 <HAL_PCD_EP_DB_Transmit+0x154>
 8000d54:	2a01      	cmp	r2, #1
 8000d56:	d006      	beq.n	8000d66 <HAL_PCD_EP_DB_Transmit+0x162>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	8922      	ldrh	r2, [r4, #8]
 8000d5c:	6961      	ldr	r1, [r4, #20]
 8000d5e:	6828      	ldr	r0, [r5, #0]
 8000d60:	f001 fef8 	bl	8002b54 <USB_WritePMA>
 8000d64:	e77f      	b.n	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d66:	682a      	ldr	r2, [r5, #0]
 8000d68:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000d6c:	440a      	add	r2, r1
 8000d6e:	7821      	ldrb	r1, [r4, #0]
 8000d70:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d74:	b299      	uxth	r1, r3
 8000d76:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d7a:	e7ed      	b.n	8000d58 <HAL_PCD_EP_DB_Transmit+0x154>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d7c:	6802      	ldr	r2, [r0, #0]
 8000d7e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000d82:	7809      	ldrb	r1, [r1, #0]
 8000d84:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000d88:	3306      	adds	r3, #6
 8000d8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000d8e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8000d92:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8000d96:	69a3      	ldr	r3, [r4, #24]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d340      	bcc.n	8000e1e <HAL_PCD_EP_DB_Transmit+0x21a>
      ep->xfer_len -= TxByteNbre;
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8000da0:	69a3      	ldr	r3, [r4, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d03e      	beq.n	8000e24 <HAL_PCD_EP_DB_Transmit+0x220>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000da6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000daa:	d10d      	bne.n	8000dc8 <HAL_PCD_EP_DB_Transmit+0x1c4>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000dac:	6828      	ldr	r0, [r5, #0]
 8000dae:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000dc8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	f47f af4a 	bne.w	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 8000dd2:	6963      	ldr	r3, [r4, #20]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8000dd8:	69e3      	ldr	r3, [r4, #28]
 8000dda:	4413      	add	r3, r2
 8000ddc:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000dde:	6a21      	ldr	r1, [r4, #32]
 8000de0:	6923      	ldr	r3, [r4, #16]
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d335      	bcc.n	8000e52 <HAL_PCD_EP_DB_Transmit+0x24e>
          ep->xfer_len_db -= len;
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000dea:	682a      	ldr	r2, [r5, #0]
 8000dec:	7861      	ldrb	r1, [r4, #1]
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d154      	bne.n	8000e9c <HAL_PCD_EP_DB_Transmit+0x298>
 8000df2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000df6:	440a      	add	r2, r1
 8000df8:	7821      	ldrb	r1, [r4, #0]
 8000dfa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000dfe:	bba3      	cbnz	r3, 8000e6a <HAL_PCD_EP_DB_Transmit+0x266>
 8000e00:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8000e04:	b289      	uxth	r1, r1
 8000e06:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000e10:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8000e14:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000e18:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000e1c:	e040      	b.n	8000ea0 <HAL_PCD_EP_DB_Transmit+0x29c>
      ep->xfer_len = 0U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61a3      	str	r3, [r4, #24]
 8000e22:	e7bd      	b.n	8000da0 <HAL_PCD_EP_DB_Transmit+0x19c>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000e24:	4628      	mov	r0, r5
 8000e26:	f003 fa51 	bl	80042cc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000e2a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000e2e:	f47f af1a 	bne.w	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000e32:	682a      	ldr	r2, [r5, #0]
 8000e34:	7821      	ldrb	r1, [r4, #0]
 8000e36:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000e50:	e709      	b.n	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        else if (ep->xfer_len_db == 0U)
 8000e52:	b921      	cbnz	r1, 8000e5e <HAL_PCD_EP_DB_Transmit+0x25a>
          ep->xfer_fill_db = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	e7c5      	b.n	8000dea <HAL_PCD_EP_DB_Transmit+0x1e6>
          ep->xfer_len_db = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8000e62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8000e66:	460b      	mov	r3, r1
 8000e68:	e7bf      	b.n	8000dea <HAL_PCD_EP_DB_Transmit+0x1e6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8000e6c:	d809      	bhi.n	8000e82 <HAL_PCD_EP_DB_Transmit+0x27e>
 8000e6e:	0859      	lsrs	r1, r3, #1
 8000e70:	f013 0f01 	tst.w	r3, #1
 8000e74:	d000      	beq.n	8000e78 <HAL_PCD_EP_DB_Transmit+0x274>
 8000e76:	3101      	adds	r1, #1
 8000e78:	0289      	lsls	r1, r1, #10
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000e80:	e00e      	b.n	8000ea0 <HAL_PCD_EP_DB_Transmit+0x29c>
 8000e82:	0959      	lsrs	r1, r3, #5
 8000e84:	f013 0f1f 	tst.w	r3, #31
 8000e88:	d100      	bne.n	8000e8c <HAL_PCD_EP_DB_Transmit+0x288>
 8000e8a:	3901      	subs	r1, #1
 8000e8c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8000e90:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000e94:	b289      	uxth	r1, r1
 8000e96:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000e9a:	e001      	b.n	8000ea0 <HAL_PCD_EP_DB_Transmit+0x29c>
 8000e9c:	2901      	cmp	r1, #1
 8000e9e:	d006      	beq.n	8000eae <HAL_PCD_EP_DB_Transmit+0x2aa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	8962      	ldrh	r2, [r4, #10]
 8000ea4:	6961      	ldr	r1, [r4, #20]
 8000ea6:	6828      	ldr	r0, [r5, #0]
 8000ea8:	f001 fe54 	bl	8002b54 <USB_WritePMA>
 8000eac:	e6db      	b.n	8000c66 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000eae:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000eb2:	440a      	add	r2, r1
 8000eb4:	7821      	ldrb	r1, [r4, #0]
 8000eb6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000ec0:	e7ee      	b.n	8000ea0 <HAL_PCD_EP_DB_Transmit+0x29c>

08000ec2 <PCD_EP_ISR_Handler>:
{
 8000ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec6:	4604      	mov	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ece:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ed2:	f000 81fa 	beq.w	80012ca <PCD_EP_ISR_Handler+0x408>
    wIstr = hpcd->Instance->ISTR;
 8000ed6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000eda:	b29b      	uxth	r3, r3
    if (epindex == 0U)
 8000edc:	f013 050f 	ands.w	r5, r3, #15
 8000ee0:	f040 80cd 	bne.w	800107e <PCD_EP_ISR_Handler+0x1bc>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ee4:	f013 0f10 	tst.w	r3, #16
 8000ee8:	d058      	beq.n	8000f9c <PCD_EP_ISR_Handler+0xda>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000eea:	8803      	ldrh	r3, [r0, #0]
 8000eec:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000eee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000ef2:	f040 8089 	bne.w	8001008 <PCD_EP_ISR_Handler+0x146>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ef6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000efa:	d0e5      	beq.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000efc:	8803      	ldrh	r3, [r0, #0]
 8000efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f02:	051b      	lsls	r3, r3, #20
 8000f04:	0d1b      	lsrs	r3, r3, #20
 8000f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f0c:	6820      	ldr	r0, [r4, #0]
 8000f0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f12:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000f16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f1a:	3306      	adds	r3, #6
 8000f1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f20:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f28:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000f2c:	b18b      	cbz	r3, 8000f52 <PCD_EP_ISR_Handler+0x90>
 8000f2e:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000f32:	b171      	cbz	r1, 8000f52 <PCD_EP_ISR_Handler+0x90>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000f34:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000f38:	f002 f9b1 	bl	800329e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000f3c:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8000f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8000f44:	4413      	add	r3, r2
 8000f46:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f003 f9b1 	bl	80042b4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000f58:	4413      	add	r3, r2
 8000f5a:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d174      	bne.n	800104c <PCD_EP_ISR_Handler+0x18a>
 8000f62:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000f66:	b292      	uxth	r2, r2
 8000f68:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000f6c:	b292      	uxth	r2, r2
 8000f6e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000f72:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f7a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f7e:	6822      	ldr	r2, [r4, #0]
 8000f80:	8813      	ldrh	r3, [r2, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	8013      	strh	r3, [r2, #0]
 8000f9a:	e795      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f9c:	8803      	ldrh	r3, [r0, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000fba:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000fbe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000fc8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fd0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000fd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fd4:	4413      	add	r3, r2
 8000fd6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f003 f976 	bl	80042cc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fe0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f43f af6f 	beq.w	8000ec8 <PCD_EP_ISR_Handler+0x6>
 8000fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f af6b 	bne.w	8000ec8 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ff2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001006:	e75f      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001008:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800100c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001014:	3306      	adds	r3, #6
 8001016:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800101a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800101e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001022:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001026:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800102a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800102e:	f002 f936 	bl	800329e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	8813      	ldrh	r3, [r2, #0]
 8001036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800103a:	051b      	lsls	r3, r3, #20
 800103c:	0d1b      	lsrs	r3, r3, #20
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001044:	4620      	mov	r0, r4
 8001046:	f003 f92d 	bl	80042a4 <HAL_PCD_SetupStageCallback>
 800104a:	e73d      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800104c:	2a3e      	cmp	r2, #62	; 0x3e
 800104e:	d809      	bhi.n	8001064 <PCD_EP_ISR_Handler+0x1a2>
 8001050:	0851      	lsrs	r1, r2, #1
 8001052:	f012 0f01 	tst.w	r2, #1
 8001056:	d000      	beq.n	800105a <PCD_EP_ISR_Handler+0x198>
 8001058:	3101      	adds	r1, #1
 800105a:	0289      	lsls	r1, r1, #10
 800105c:	b289      	uxth	r1, r1
 800105e:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8001062:	e78c      	b.n	8000f7e <PCD_EP_ISR_Handler+0xbc>
 8001064:	0951      	lsrs	r1, r2, #5
 8001066:	f012 0f1f 	tst.w	r2, #31
 800106a:	d100      	bne.n	800106e <PCD_EP_ISR_Handler+0x1ac>
 800106c:	3901      	subs	r1, #1
 800106e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8001072:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001076:	b292      	uxth	r2, r2
 8001078:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800107c:	e77f      	b.n	8000f7e <PCD_EP_ISR_Handler+0xbc>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800107e:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 8001082:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001084:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8001088:	d149      	bne.n	800111e <PCD_EP_ISR_Handler+0x25c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800108a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800108e:	f43f af1b 	beq.w	8000ec8 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8001092:	1c68      	adds	r0, r5, #1
 8001094:	0082      	lsls	r2, r0, #2
 8001096:	1813      	adds	r3, r2, r0
 8001098:	00d9      	lsls	r1, r3, #3
 800109a:	4421      	add	r1, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800109c:	6827      	ldr	r7, [r4, #0]
 800109e:	f837 3025 	ldrh.w	r3, [r7, r5, lsl #2]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f827 3025 	strh.w	r3, [r7, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 80010ba:	78cb      	ldrb	r3, [r1, #3]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	f000 80e7 	beq.w	8001290 <PCD_EP_ISR_Handler+0x3ce>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010c2:	6820      	ldr	r0, [r4, #0]
 80010c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010c8:	1c6a      	adds	r2, r5, #1
 80010ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80010ce:	00d6      	lsls	r6, r2, #3
 80010d0:	5da2      	ldrb	r2, [r4, r6]
 80010d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010d6:	3302      	adds	r3, #2
 80010d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80010e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 80010e4:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 80010e8:	00f2      	lsls	r2, r6, #3
 80010ea:	4616      	mov	r6, r2
 80010ec:	4422      	add	r2, r4
 80010ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f240 80d6 	bls.w	80012a2 <PCD_EP_ISR_Handler+0x3e0>
            ep->xfer_len -= TxByteNbre;
 80010f6:	4426      	add	r6, r4
 80010f8:	1ad2      	subs	r2, r2, r3
 80010fa:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80010fc:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001100:	00f2      	lsls	r2, r6, #3
 8001102:	4422      	add	r2, r4
 8001104:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001106:	2a00      	cmp	r2, #0
 8001108:	f040 80d2 	bne.w	80012b0 <PCD_EP_ISR_Handler+0x3ee>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800110c:	3501      	adds	r5, #1
 800110e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001112:	00eb      	lsls	r3, r5, #3
 8001114:	5ce1      	ldrb	r1, [r4, r3]
 8001116:	4620      	mov	r0, r4
 8001118:	f003 f8d8 	bl	80042cc <HAL_PCD_DataInStageCallback>
 800111c:	e6d4      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800111e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001126:	051b      	lsls	r3, r3, #20
 8001128:	0d1b      	lsrs	r3, r3, #20
 800112a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112e:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8001132:	00ab      	lsls	r3, r5, #2
 8001134:	195a      	adds	r2, r3, r5
 8001136:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800113a:	4642      	mov	r2, r8
 800113c:	f508 78b4 	add.w	r8, r8, #360	; 0x168
 8001140:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 8001142:	4422      	add	r2, r4
 8001144:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
 8001148:	2b00      	cmp	r3, #0
 800114a:	d13f      	bne.n	80011cc <PCD_EP_ISR_Handler+0x30a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800114c:	6820      	ldr	r0, [r4, #0]
 800114e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001152:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001156:	00ca      	lsls	r2, r1, #3
 8001158:	4611      	mov	r1, r2
 800115a:	4422      	add	r2, r4
 800115c:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001164:	3306      	adds	r3, #6
 8001166:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800116a:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 800116e:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8001172:	bb17      	cbnz	r7, 80011ba <PCD_EP_ISR_Handler+0x2f8>
        ep->xfer_count += count;
 8001174:	00aa      	lsls	r2, r5, #2
 8001176:	442a      	add	r2, r5
 8001178:	00d3      	lsls	r3, r2, #3
 800117a:	4423      	add	r3, r4
 800117c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001180:	443a      	add	r2, r7
 8001182:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001186:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800118a:	443a      	add	r2, r7
 800118c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001190:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001194:	b13b      	cbz	r3, 80011a6 <PCD_EP_ISR_Handler+0x2e4>
 8001196:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800119a:	00d3      	lsls	r3, r2, #3
 800119c:	4423      	add	r3, r4
 800119e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80011a2:	429f      	cmp	r7, r3
 80011a4:	d26f      	bcs.n	8001286 <PCD_EP_ISR_Handler+0x3c4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80011a6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80011aa:	00d3      	lsls	r3, r2, #3
 80011ac:	4423      	add	r3, r4
 80011ae:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80011b2:	4620      	mov	r0, r4
 80011b4:	f003 f87e 	bl	80042b4 <HAL_PCD_DataOutStageCallback>
 80011b8:	e767      	b.n	800108a <PCD_EP_ISR_Handler+0x1c8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80011ba:	4421      	add	r1, r4
 80011bc:	463b      	mov	r3, r7
 80011be:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 80011c2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80011c6:	f002 f86a 	bl	800329e <USB_ReadPMA>
 80011ca:	e7d3      	b.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
          if (ep->type == EP_TYPE_BULK)
 80011cc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80011d0:	00d3      	lsls	r3, r2, #3
 80011d2:	4423      	add	r3, r4
 80011d4:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d034      	beq.n	8001246 <PCD_EP_ISR_Handler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011dc:	6821      	ldr	r1, [r4, #0]
 80011de:	00ab      	lsls	r3, r5, #2
 80011e0:	442b      	add	r3, r5
 80011e2:	00da      	lsls	r2, r3, #3
 80011e4:	4422      	add	r2, r4
 80011e6:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 80011ea:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001200:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800120a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800120e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001212:	d01f      	beq.n	8001254 <PCD_EP_ISR_Handler+0x392>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001214:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800121c:	3302      	adds	r3, #2
 800121e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001222:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001226:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800122a:	2f00      	cmp	r7, #0
 800122c:	d0a2      	beq.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800122e:	00ab      	lsls	r3, r5, #2
 8001230:	442b      	add	r3, r5
 8001232:	00d9      	lsls	r1, r3, #3
 8001234:	4421      	add	r1, r4
 8001236:	463b      	mov	r3, r7
 8001238:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800123c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001240:	f002 f82d 	bl	800329e <USB_ReadPMA>
 8001244:	e796      	b.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001246:	4632      	mov	r2, r6
 8001248:	4641      	mov	r1, r8
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff fbb2 	bl	80009b4 <HAL_PCD_EP_DB_Receive>
 8001250:	4607      	mov	r7, r0
 8001252:	e78f      	b.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001254:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800125c:	3306      	adds	r3, #6
 800125e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001262:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001266:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800126a:	2f00      	cmp	r7, #0
 800126c:	d082      	beq.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800126e:	00ab      	lsls	r3, r5, #2
 8001270:	442b      	add	r3, r5
 8001272:	00d9      	lsls	r1, r3, #3
 8001274:	4421      	add	r1, r4
 8001276:	463b      	mov	r3, r7
 8001278:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800127c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001280:	f002 f80d 	bl	800329e <USB_ReadPMA>
 8001284:	e776      	b.n	8001174 <PCD_EP_ISR_Handler+0x2b2>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001286:	4641      	mov	r1, r8
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	f001 fc78 	bl	8002b7e <USB_EPStartXfer>
 800128e:	e6fc      	b.n	800108a <PCD_EP_ISR_Handler+0x1c8>
        if ((ep->type != EP_TYPE_BULK) ||
 8001290:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001294:	f43f af15 	beq.w	80010c2 <PCD_EP_ISR_Handler+0x200>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001298:	4632      	mov	r2, r6
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff fcb2 	bl	8000c04 <HAL_PCD_EP_DB_Transmit>
 80012a0:	e612      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 80012a2:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 80012a6:	00f2      	lsls	r2, r6, #3
 80012a8:	4422      	add	r2, r4
 80012aa:	2600      	movs	r6, #0
 80012ac:	6416      	str	r6, [r2, #64]	; 0x40
 80012ae:	e725      	b.n	80010fc <PCD_EP_ISR_Handler+0x23a>
            ep->xfer_buff += TxByteNbre;
 80012b0:	00ae      	lsls	r6, r5, #2
 80012b2:	1977      	adds	r7, r6, r5
 80012b4:	00fa      	lsls	r2, r7, #3
 80012b6:	4422      	add	r2, r4
 80012b8:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 80012ba:	441f      	add	r7, r3
 80012bc:	63d7      	str	r7, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80012be:	6c55      	ldr	r5, [r2, #68]	; 0x44
 80012c0:	442b      	add	r3, r5
 80012c2:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012c4:	f001 fc5b 	bl	8002b7e <USB_EPStartXfer>
 80012c8:	e5fe      	b.n	8000ec8 <PCD_EP_ISR_Handler+0x6>
}
 80012ca:	2000      	movs	r0, #0
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012d0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80012d0:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d00d      	beq.n	80012f4 <HAL_PCD_SetAddress+0x24>
{
 80012d8:	b510      	push	{r4, lr}
 80012da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012dc:	2301      	movs	r3, #1
 80012de:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012e2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012e6:	6800      	ldr	r0, [r0, #0]
 80012e8:	f001 fc25 	bl	8002b36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80012f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012f4:	2002      	movs	r0, #2
}
 80012f6:	4770      	bx	lr

080012f8 <HAL_PCD_IRQHandler>:
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012fe:	6800      	ldr	r0, [r0, #0]
 8001300:	f001 fc23 	bl	8002b4a <USB_ReadInterrupts>
 8001304:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001308:	d147      	bne.n	800139a <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	f001 fc1d 	bl	8002b4a <USB_ReadInterrupts>
 8001310:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8001314:	d145      	bne.n	80013a2 <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001316:	6820      	ldr	r0, [r4, #0]
 8001318:	f001 fc17 	bl	8002b4a <USB_ReadInterrupts>
 800131c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001320:	d008      	beq.n	8001334 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001328:	b29b      	uxth	r3, r3
 800132a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800132e:	b29b      	uxth	r3, r3
 8001330:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 fc08 	bl	8002b4a <USB_ReadInterrupts>
 800133a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800133e:	d008      	beq.n	8001352 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001340:	6822      	ldr	r2, [r4, #0]
 8001342:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001346:	b29b      	uxth	r3, r3
 8001348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800134c:	b29b      	uxth	r3, r3
 800134e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	f001 fbf9 	bl	8002b4a <USB_ReadInterrupts>
 8001358:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800135c:	d132      	bne.n	80013c4 <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f001 fbf3 	bl	8002b4a <USB_ReadInterrupts>
 8001364:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001368:	d177      	bne.n	800145a <HAL_PCD_IRQHandler+0x162>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	f001 fbed 	bl	8002b4a <USB_ReadInterrupts>
 8001370:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001374:	f040 809a 	bne.w	80014ac <HAL_PCD_IRQHandler+0x1b4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	f001 fbe6 	bl	8002b4a <USB_ReadInterrupts>
 800137e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001382:	d008      	beq.n	8001396 <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800138a:	b29b      	uxth	r3, r3
 800138c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001390:	b29b      	uxth	r3, r3
 8001392:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001396:	b004      	add	sp, #16
 8001398:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fd91 	bl	8000ec2 <PCD_EP_ISR_Handler>
 80013a0:	e7b3      	b.n	800130a <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80013b4:	4620      	mov	r0, r4
 80013b6:	f002 ff9a 	bl	80042ee <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013ba:	2100      	movs	r1, #0
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ff87 	bl	80012d0 <HAL_PCD_SetAddress>
 80013c2:	e7a8      	b.n	8001316 <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80013c4:	6822      	ldr	r2, [r4, #0]
 80013c6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f023 0308 	bic.w	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80013e8:	4620      	mov	r0, r4
 80013ea:	f002 ffa2 	bl	8004332 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001400:	e7ad      	b.n	800135e <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001408:	aa04      	add	r2, sp, #16
 800140a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800140e:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8001412:	3301      	adds	r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b07      	cmp	r3, #7
 8001418:	d9f3      	bls.n	8001402 <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001428:	6822      	ldr	r2, [r4, #0]
 800142a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800142e:	b29b      	uxth	r3, r3
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001440:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001444:	d0f9      	beq.n	800143a <HAL_PCD_IRQHandler+0x142>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001446:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800144a:	b292      	uxth	r2, r2
 800144c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001450:	b292      	uxth	r2, r2
 8001452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	e00b      	b.n	8001472 <HAL_PCD_IRQHandler+0x17a>
    for (i = 0U; i < 8U; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	e7db      	b.n	8001416 <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	a904      	add	r1, sp, #16
 8001462:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001466:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 800146a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 800146e:	3301      	adds	r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b07      	cmp	r3, #7
 8001474:	d9f3      	bls.n	800145e <HAL_PCD_IRQHandler+0x166>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800148a:	b29b      	uxth	r3, r3
 800148c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001490:	b29b      	uxth	r3, r3
 8001492:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f002 ff33 	bl	8004310 <HAL_PCD_SuspendCallback>
 80014aa:	e75e      	b.n	800136a <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80014be:	4620      	mov	r0, r4
 80014c0:	f002 ff0f 	bl	80042e2 <HAL_PCD_SOFCallback>
 80014c4:	e758      	b.n	8001378 <HAL_PCD_IRQHandler+0x80>

080014c6 <HAL_PCD_EP_Open>:
{
 80014c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80014c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014cc:	d126      	bne.n	800151c <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ce:	f001 0507 	and.w	r5, r1, #7
 80014d2:	00ae      	lsls	r6, r5, #2
 80014d4:	1977      	adds	r7, r6, r5
 80014d6:	00fc      	lsls	r4, r7, #3
 80014d8:	4627      	mov	r7, r4
 80014da:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80014de:	4404      	add	r4, r0
    ep->is_in = 0U;
 80014e0:	4407      	add	r7, r0
 80014e2:	2500      	movs	r5, #0
 80014e4:	f887 5169 	strb.w	r5, [r7, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e8:	f001 0107 	and.w	r1, r1, #7
 80014ec:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80014ee:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80014f0:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80014f2:	7862      	ldrb	r2, [r4, #1]
 80014f4:	b102      	cbz	r2, 80014f8 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80014f6:	81e1      	strh	r1, [r4, #14]
  if (ep_type == EP_TYPE_BULK)
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d019      	beq.n	8001530 <HAL_PCD_EP_Open+0x6a>
  __HAL_LOCK(hpcd);
 80014fc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d018      	beq.n	8001536 <HAL_PCD_EP_Open+0x70>
 8001504:	4605      	mov	r5, r0
 8001506:	2301      	movs	r3, #1
 8001508:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800150c:	4621      	mov	r1, r4
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	f001 f819 	bl	8002546 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001514:	2000      	movs	r0, #0
 8001516:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151c:	f001 0507 	and.w	r5, r1, #7
 8001520:	1c6e      	adds	r6, r5, #1
 8001522:	00b5      	lsls	r5, r6, #2
 8001524:	19af      	adds	r7, r5, r6
 8001526:	00fc      	lsls	r4, r7, #3
 8001528:	4404      	add	r4, r0
    ep->is_in = 1U;
 800152a:	2501      	movs	r5, #1
 800152c:	7065      	strb	r5, [r4, #1]
 800152e:	e7db      	b.n	80014e8 <HAL_PCD_EP_Open+0x22>
    ep->data_pid_start = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	7123      	strb	r3, [r4, #4]
 8001534:	e7e2      	b.n	80014fc <HAL_PCD_EP_Open+0x36>
  __HAL_LOCK(hpcd);
 8001536:	2002      	movs	r0, #2
 8001538:	e7ef      	b.n	800151a <HAL_PCD_EP_Open+0x54>

0800153a <HAL_PCD_EP_Close>:
{
 800153a:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800153c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001540:	d120      	bne.n	8001584 <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001542:	f001 0407 	and.w	r4, r1, #7
 8001546:	00a2      	lsls	r2, r4, #2
 8001548:	1915      	adds	r5, r2, r4
 800154a:	00eb      	lsls	r3, r5, #3
 800154c:	461d      	mov	r5, r3
 800154e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001552:	4403      	add	r3, r0
    ep->is_in = 0U;
 8001554:	462c      	mov	r4, r5
 8001556:	4404      	add	r4, r0
 8001558:	2200      	movs	r2, #0
 800155a:	f884 2169 	strb.w	r2, [r4, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800155e:	f001 0107 	and.w	r1, r1, #7
 8001562:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001564:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8001568:	2a01      	cmp	r2, #1
 800156a:	d015      	beq.n	8001598 <HAL_PCD_EP_Close+0x5e>
 800156c:	4604      	mov	r4, r0
 800156e:	2201      	movs	r2, #1
 8001570:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001574:	4619      	mov	r1, r3
 8001576:	6800      	ldr	r0, [r0, #0]
 8001578:	f001 f97d 	bl	8002876 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800157c:	2000      	movs	r0, #0
 800157e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001582:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001584:	f001 0207 	and.w	r2, r1, #7
 8001588:	1c54      	adds	r4, r2, #1
 800158a:	00a2      	lsls	r2, r4, #2
 800158c:	1915      	adds	r5, r2, r4
 800158e:	00eb      	lsls	r3, r5, #3
 8001590:	4403      	add	r3, r0
    ep->is_in = 1U;
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
 8001596:	e7e2      	b.n	800155e <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8001598:	2002      	movs	r0, #2
 800159a:	e7f2      	b.n	8001582 <HAL_PCD_EP_Close+0x48>

0800159c <HAL_PCD_EP_Receive>:
{
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a2:	00ae      	lsls	r6, r5, #2
 80015a4:	1971      	adds	r1, r6, r5
 80015a6:	00cc      	lsls	r4, r1, #3
 80015a8:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80015ac:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 80015ae:	1977      	adds	r7, r6, r5
 80015b0:	00fc      	lsls	r4, r7, #3
 80015b2:	4404      	add	r4, r0
 80015b4:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
  ep->xfer_len = len;
 80015b8:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
  ep->is_in = 0U;
 80015c2:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c6:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015ca:	b125      	cbz	r5, 80015d6 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015cc:	6800      	ldr	r0, [r0, #0]
 80015ce:	f001 fad6 	bl	8002b7e <USB_EPStartXfer>
}
 80015d2:	2000      	movs	r0, #0
 80015d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015d6:	6800      	ldr	r0, [r0, #0]
 80015d8:	f001 fad1 	bl	8002b7e <USB_EPStartXfer>
 80015dc:	e7f9      	b.n	80015d2 <HAL_PCD_EP_Receive+0x36>

080015de <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015de:	f001 0107 	and.w	r1, r1, #7
 80015e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80015e6:	00cb      	lsls	r3, r1, #3
 80015e8:	4418      	add	r0, r3
}
 80015ea:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80015ee:	4770      	bx	lr

080015f0 <HAL_PCD_EP_Transmit>:
{
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	f001 0607 	and.w	r6, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	1c77      	adds	r7, r6, #1
 80015f8:	00bd      	lsls	r5, r7, #2
 80015fa:	19ec      	adds	r4, r5, r7
 80015fc:	00e1      	lsls	r1, r4, #3
 80015fe:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001600:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8001604:	44b4      	add	ip, r6
 8001606:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800160a:	4404      	add	r4, r0
 800160c:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 800160e:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001610:	2201      	movs	r2, #1
 8001612:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001616:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800161c:	19ec      	adds	r4, r5, r7
 800161e:	00e3      	lsls	r3, r4, #3
 8001620:	461c      	mov	r4, r3
 8001622:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001624:	5506      	strb	r6, [r0, r4]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001626:	b126      	cbz	r6, 8001632 <HAL_PCD_EP_Transmit+0x42>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001628:	6800      	ldr	r0, [r0, #0]
 800162a:	f001 faa8 	bl	8002b7e <USB_EPStartXfer>
}
 800162e:	2000      	movs	r0, #0
 8001630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001632:	6800      	ldr	r0, [r0, #0]
 8001634:	f001 faa3 	bl	8002b7e <USB_EPStartXfer>
 8001638:	e7f9      	b.n	800162e <HAL_PCD_EP_Transmit+0x3e>

0800163a <HAL_PCD_EP_SetStall>:
{
 800163a:	b538      	push	{r3, r4, r5, lr}
 800163c:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001640:	6843      	ldr	r3, [r0, #4]
 8001642:	429d      	cmp	r5, r3
 8001644:	d830      	bhi.n	80016a8 <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 8001646:	f011 0f80 	tst.w	r1, #128	; 0x80
 800164a:	d11f      	bne.n	800168c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800164c:	008a      	lsls	r2, r1, #2
 800164e:	1854      	adds	r4, r2, r1
 8001650:	00e3      	lsls	r3, r4, #3
 8001652:	461c      	mov	r4, r3
 8001654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001658:	4403      	add	r3, r0
    ep->is_in = 0U;
 800165a:	4622      	mov	r2, r4
 800165c:	4402      	add	r2, r0
 800165e:	2100      	movs	r1, #0
 8001660:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 8001664:	2201      	movs	r2, #1
 8001666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800166a:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800166e:	2a01      	cmp	r2, #1
 8001670:	d01c      	beq.n	80016ac <HAL_PCD_EP_SetStall+0x72>
 8001672:	4604      	mov	r4, r0
 8001674:	2201      	movs	r2, #1
 8001676:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800167a:	4619      	mov	r1, r3
 800167c:	6800      	ldr	r0, [r0, #0]
 800167e:	f001 f9e4 	bl	8002a4a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001682:	b15d      	cbz	r5, 800169c <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 8001684:	2000      	movs	r0, #0
 8001686:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 800168a:	e00e      	b.n	80016aa <HAL_PCD_EP_SetStall+0x70>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168c:	1c6c      	adds	r4, r5, #1
 800168e:	00a2      	lsls	r2, r4, #2
 8001690:	1911      	adds	r1, r2, r4
 8001692:	00cb      	lsls	r3, r1, #3
 8001694:	4403      	add	r3, r0
    ep->is_in = 1U;
 8001696:	2201      	movs	r2, #1
 8001698:	705a      	strb	r2, [r3, #1]
 800169a:	e7e3      	b.n	8001664 <HAL_PCD_EP_SetStall+0x2a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800169c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80016a0:	6820      	ldr	r0, [r4, #0]
 80016a2:	f001 fa55 	bl	8002b50 <USB_EP0_OutStart>
 80016a6:	e7ed      	b.n	8001684 <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
}
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80016ac:	2002      	movs	r0, #2
 80016ae:	e7fc      	b.n	80016aa <HAL_PCD_EP_SetStall+0x70>

080016b0 <HAL_PCD_EP_ClrStall>:
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016b2:	f001 020f 	and.w	r2, r1, #15
 80016b6:	6843      	ldr	r3, [r0, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d82f      	bhi.n	800171c <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80016bc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016c0:	d122      	bne.n	8001708 <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	f001 0407 	and.w	r4, r1, #7
 80016c6:	00a3      	lsls	r3, r4, #2
 80016c8:	191d      	adds	r5, r3, r4
 80016ca:	00ea      	lsls	r2, r5, #3
 80016cc:	4615      	mov	r5, r2
 80016ce:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 80016d2:	4402      	add	r2, r0
    ep->is_in = 0U;
 80016d4:	462c      	mov	r4, r5
 80016d6:	4404      	add	r4, r0
 80016d8:	2300      	movs	r3, #0
 80016da:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->is_stall = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e2:	f001 0307 	and.w	r3, r1, #7
 80016e6:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80016e8:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d017      	beq.n	8001720 <HAL_PCD_EP_ClrStall+0x70>
 80016f0:	4604      	mov	r4, r0
 80016f2:	2301      	movs	r3, #1
 80016f4:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f8:	4611      	mov	r1, r2
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	f001 f9ca 	bl	8002a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001700:	2000      	movs	r0, #0
 8001702:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 8001706:	e00a      	b.n	800171e <HAL_PCD_EP_ClrStall+0x6e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001708:	f001 0307 	and.w	r3, r1, #7
 800170c:	1c5c      	adds	r4, r3, #1
 800170e:	00a3      	lsls	r3, r4, #2
 8001710:	191d      	adds	r5, r3, r4
 8001712:	00ea      	lsls	r2, r5, #3
 8001714:	4402      	add	r2, r0
    ep->is_in = 1U;
 8001716:	2301      	movs	r3, #1
 8001718:	7053      	strb	r3, [r2, #1]
 800171a:	e7e0      	b.n	80016de <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
}
 800171e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001720:	2002      	movs	r0, #2
 8001722:	e7fc      	b.n	800171e <HAL_PCD_EP_ClrStall+0x6e>

08001724 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001724:	b410      	push	{r4}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001726:	f011 0f80 	tst.w	r1, #128	; 0x80
 800172a:	d00f      	beq.n	800174c <HAL_PCDEx_PMAConfig+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172c:	f001 0107 	and.w	r1, r1, #7
 8001730:	3101      	adds	r1, #1
 8001732:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001736:	00cc      	lsls	r4, r1, #3
 8001738:	4420      	add	r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800173a:	b172      	cbz	r2, 800175a <HAL_PCDEx_PMAConfig+0x36>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800173c:	2201      	movs	r2, #1
 800173e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001740:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001742:	0c1b      	lsrs	r3, r3, #16
 8001744:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 8001746:	2000      	movs	r0, #0
 8001748:	bc10      	pop	{r4}
 800174a:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800174c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001750:	00cc      	lsls	r4, r1, #3
 8001752:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8001756:	4420      	add	r0, r4
 8001758:	e7ef      	b.n	800173a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 0U;
 800175a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800175c:	80c3      	strh	r3, [r0, #6]
 800175e:	e7f2      	b.n	8001746 <HAL_PCDEx_PMAConfig+0x22>

08001760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001760:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001762:	f240 0328 	movw	r3, #40	; 0x28
 8001766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8001770:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0a5b      	lsrs	r3, r3, #9
 800177a:	fb00 f003 	mul.w	r0, r0, r3
 800177e:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8001780:	bf00      	nop
  }
  while (Delay --);
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	9201      	str	r2, [sp, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f9      	bne.n	8001780 <RCC_Delay+0x20>
}
 800178c:	b002      	add	sp, #8
 800178e:	4770      	bx	lr

08001790 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001790:	2800      	cmp	r0, #0
 8001792:	f000 826b 	beq.w	8001c6c <HAL_RCC_OscConfig+0x4dc>
{
 8001796:	b570      	push	{r4, r5, r6, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179c:	6803      	ldr	r3, [r0, #0]
 800179e:	f013 0f01 	tst.w	r3, #1
 80017a2:	d038      	beq.n	8001816 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d023      	beq.n	80017fe <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d012      	beq.n	80017ee <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c8:	6863      	ldr	r3, [r4, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d054      	beq.n	800187a <HAL_RCC_OscConfig+0xea>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d16e      	bne.n	80018b2 <HAL_RCC_OscConfig+0x122>
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e04d      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017fc:	d0e4      	beq.n	80017c8 <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800180c:	d003      	beq.n	8001816 <HAL_RCC_OscConfig+0x86>
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 822d 	beq.w	8001c70 <HAL_RCC_OscConfig+0x4e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f013 0f02 	tst.w	r3, #2
 800181c:	f000 8098 	beq.w	8001950 <HAL_RCC_OscConfig+0x1c0>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f013 0f0c 	tst.w	r3, #12
 800182e:	d077      	beq.n	8001920 <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d066      	beq.n	8001910 <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001842:	6923      	ldr	r3, [r4, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ae 	beq.w	80019a6 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001854:	f7fe ff01 	bl	800065a <HAL_GetTick>
 8001858:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f013 0f02 	tst.w	r3, #2
 8001868:	f040 8091 	bne.w	800198e <HAL_RCC_OscConfig+0x1fe>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186c:	f7fe fef5 	bl	800065a <HAL_GetTick>
 8001870:	1b40      	subs	r0, r0, r5
 8001872:	2802      	cmp	r0, #2
 8001874:	d9f1      	bls.n	800185a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001876:	2003      	movs	r0, #3
 8001878:	e1fd      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001888:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	b373      	cbz	r3, 80018ec <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 800188e:	f7fe fee4 	bl	800065a <HAL_GetTick>
 8001892:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018a2:	d1b8      	bne.n	8001816 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7fe fed9 	bl	800065a <HAL_GetTick>
 80018a8:	1b40      	subs	r0, r0, r5
 80018aa:	2864      	cmp	r0, #100	; 0x64
 80018ac:	d9f2      	bls.n	8001894 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80018ae:	2003      	movs	r0, #3
 80018b0:	e1e1      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x142>
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e7db      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e7ce      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80018ec:	f7fe feb5 	bl	800065a <HAL_GetTick>
 80018f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001900:	d089      	beq.n	8001816 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001902:	f7fe feaa 	bl	800065a <HAL_GetTick>
 8001906:	1b40      	subs	r0, r0, r5
 8001908:	2864      	cmp	r0, #100	; 0x64
 800190a:	d9f2      	bls.n	80018f2 <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
 800190e:	e1b2      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800191e:	d190      	bne.n	8001842 <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f013 0f02 	tst.w	r3, #2
 800192e:	d004      	beq.n	800193a <HAL_RCC_OscConfig+0x1aa>
 8001930:	6923      	ldr	r3, [r4, #16]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x1aa>
        return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
 8001938:	e19d      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001948:	6961      	ldr	r1, [r4, #20]
 800194a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800194e:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	f013 0f08 	tst.w	r3, #8
 8001956:	d040      	beq.n	80019da <HAL_RCC_OscConfig+0x24a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	69a3      	ldr	r3, [r4, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d072      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_LSI_ENABLE();
 800195e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001962:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800196a:	f7fe fe76 	bl	800065a <HAL_GetTick>
 800196e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f013 0f02 	tst.w	r3, #2
 800197e:	d129      	bne.n	80019d4 <HAL_RCC_OscConfig+0x244>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7fe fe6b 	bl	800065a <HAL_GetTick>
 8001984:	1b40      	subs	r0, r0, r5
 8001986:	2802      	cmp	r0, #2
 8001988:	d9f2      	bls.n	8001970 <HAL_RCC_OscConfig+0x1e0>
          return HAL_TIMEOUT;
 800198a:	2003      	movs	r0, #3
 800198c:	e173      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001992:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800199c:	6961      	ldr	r1, [r4, #20]
 800199e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e7d4      	b.n	8001950 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019b0:	f7fe fe53 	bl	800065a <HAL_GetTick>
 80019b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f013 0f02 	tst.w	r3, #2
 80019c4:	d0c4      	beq.n	8001950 <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7fe fe48 	bl	800065a <HAL_GetTick>
 80019ca:	1b40      	subs	r0, r0, r5
 80019cc:	2802      	cmp	r0, #2
 80019ce:	d9f2      	bls.n	80019b6 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 80019d0:	2003      	movs	r0, #3
 80019d2:	e150      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
      RCC_Delay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fec3 	bl	8001760 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f013 0f04 	tst.w	r3, #4
 80019e0:	f000 80b3 	beq.w	8001b4a <HAL_RCC_OscConfig+0x3ba>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80019f2:	d13f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a0e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a1e:	d02b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	68e3      	ldr	r3, [r4, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d042      	beq.n	8001aac <HAL_RCC_OscConfig+0x31c>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d15e      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x358>
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	621a      	str	r2, [r3, #32]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	621a      	str	r2, [r3, #32]
 8001a42:	e03b      	b.n	8001abc <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_DISABLE();
 8001a44:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001a48:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a50:	f7fe fe03 	bl	800065a <HAL_GetTick>
 8001a54:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f013 0f02 	tst.w	r3, #2
 8001a64:	d0b9      	beq.n	80019da <HAL_RCC_OscConfig+0x24a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7fe fdf8 	bl	800065a <HAL_GetTick>
 8001a6a:	1b40      	subs	r0, r0, r5
 8001a6c:	2802      	cmp	r0, #2
 8001a6e:	d9f2      	bls.n	8001a56 <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 8001a70:	2003      	movs	r0, #3
 8001a72:	e100      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    FlagStatus       pwrclkchanged = RESET;
 8001a74:	2500      	movs	r5, #0
 8001a76:	e7cb      	b.n	8001a10 <HAL_RCC_OscConfig+0x280>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a88:	f7fe fde7 	bl	800065a <HAL_GetTick>
 8001a8c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a9c:	d1c0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x290>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7fe fddc 	bl	800065a <HAL_GetTick>
 8001aa2:	1b80      	subs	r0, r0, r6
 8001aa4:	2864      	cmp	r0, #100	; 0x64
 8001aa6:	d9f2      	bls.n	8001a8e <HAL_RCC_OscConfig+0x2fe>
          return HAL_TIMEOUT;
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	e0e4      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abc:	68e3      	ldr	r3, [r4, #12]
 8001abe:	b37b      	cbz	r3, 8001b20 <HAL_RCC_OscConfig+0x390>
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fdcb 	bl	800065a <HAL_GetTick>
 8001ac4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f013 0f02 	tst.w	r3, #2
 8001ad4:	d138      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7fe fdc0 	bl	800065a <HAL_GetTick>
 8001ada:	1b80      	subs	r0, r0, r6
 8001adc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ae0:	4298      	cmp	r0, r3
 8001ae2:	d9f0      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	e0c6      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x376>
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	621a      	str	r2, [r3, #32]
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	f022 0204 	bic.w	r2, r2, #4
 8001b02:	621a      	str	r2, [r3, #32]
 8001b04:	e7da      	b.n	8001abc <HAL_RCC_OscConfig+0x32c>
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	f042 0204 	orr.w	r2, r2, #4
 8001b14:	621a      	str	r2, [r3, #32]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	621a      	str	r2, [r3, #32]
 8001b1e:	e7cd      	b.n	8001abc <HAL_RCC_OscConfig+0x32c>
      tickstart = HAL_GetTick();
 8001b20:	f7fe fd9b 	bl	800065a <HAL_GetTick>
 8001b24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f013 0f02 	tst.w	r3, #2
 8001b34:	d008      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7fe fd90 	bl	800065a <HAL_GetTick>
 8001b3a:	1b80      	subs	r0, r0, r6
 8001b3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d9f0      	bls.n	8001b26 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	e096      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    if (pwrclkchanged == SET)
 8001b48:	bb2d      	cbnz	r5, 8001b96 <HAL_RCC_OscConfig+0x406>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4a:	69e3      	ldr	r3, [r4, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8091 	beq.w	8001c74 <HAL_RCC_OscConfig+0x4e4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b5a:	6852      	ldr	r2, [r2, #4]
 8001b5c:	f002 020c 	and.w	r2, r2, #12
 8001b60:	2a08      	cmp	r2, #8
 8001b62:	d06e      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4b2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d01f      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_DISABLE();
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b72:	f7fe fd72 	bl	800065a <HAL_GetTick>
 8001b76:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b86:	d05a      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe fd67 	bl	800065a <HAL_GetTick>
 8001b8c:	1b00      	subs	r0, r0, r4
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	d9f2      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 8001b92:	2003      	movs	r0, #3
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ba4:	61da      	str	r2, [r3, #28]
 8001ba6:	e7d0      	b.n	8001b4a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	2360      	movs	r3, #96	; 0x60
 8001baa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fd52 	bl	800065a <HAL_GetTick>
 8001bb6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bc6:	d006      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe fd47 	bl	800065a <HAL_GetTick>
 8001bcc:	1b40      	subs	r0, r0, r5
 8001bce:	2802      	cmp	r0, #2
 8001bd0:	d9f2      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd6:	6a23      	ldr	r3, [r4, #32]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d022      	beq.n	8001c24 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001be6:	6853      	ldr	r3, [r2, #4]
 8001be8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001bec:	6a21      	ldr	r1, [r4, #32]
 8001bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bf0:	4301      	orrs	r1, r0
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c00:	f7fe fd2b 	bl	800065a <HAL_GetTick>
 8001c04:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c14:	d111      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe fd20 	bl	800065a <HAL_GetTick>
 8001c1a:	1b00      	subs	r0, r0, r4
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	d9f2      	bls.n	8001c06 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8001c20:	2003      	movs	r0, #3
 8001c22:	e028      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c2c:	6853      	ldr	r3, [r2, #4]
 8001c2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c32:	68a1      	ldr	r1, [r4, #8]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6053      	str	r3, [r2, #4]
 8001c38:	e7d1      	b.n	8001bde <HAL_RCC_OscConfig+0x44e>
  return HAL_OK;
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e019      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d019      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4ea>
        pll_config = RCC->CFGR;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c4e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001c54:	6a22      	ldr	r2, [r4, #32]
 8001c56:	4291      	cmp	r1, r2
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4ce>
          return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c5e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c62:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00a      	beq.n	8001c7e <HAL_RCC_OscConfig+0x4ee>
          return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
    return HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
}
 8001c6e:	4770      	bx	lr
        return HAL_ERROR;
 8001c70:	2001      	movs	r0, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8001c74:	2000      	movs	r0, #0
}
 8001c76:	b002      	add	sp, #8
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e7fb      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7f9      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e6>

08001c82 <HAL_RCC_GetSysClockFreq>:
{
 8001c82:	b410      	push	{r4}
 8001c84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c86:	f244 54d4 	movw	r4, #17876	; 0x45d4
 8001c8a:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c92:	f10d 0c18 	add.w	ip, sp, #24
 8001c96:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c9a:	8a23      	ldrh	r3, [r4, #16]
 8001c9c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca8:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001caa:	f002 030c 	and.w	r3, r2, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d123      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x78>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001cb6:	4463      	add	r3, ip
 8001cb8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cc6:	f2c0 003d 	movt	r0, #61	; 0x3d
 8001cca:	fb00 f001 	mul.w	r0, r0, r1
}
 8001cce:	b007      	add	sp, #28
 8001cd0:	bc10      	pop	{r4}
 8001cd2:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001ce2:	4462      	add	r2, ip
 8001ce4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001cec:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001cf0:	fb03 f001 	mul.w	r0, r3, r1
 8001cf4:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cf8:	e7e9      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
 8001cfa:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8001cfe:	f2c0 007a 	movt	r0, #122	; 0x7a
  return sysclockfreq;
 8001d02:	e7e4      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x4c>

08001d04 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001d04:	2800      	cmp	r0, #0
 8001d06:	f000 80da 	beq.w	8001ebe <HAL_RCC_ClockConfig+0x1ba>
{
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d20f      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f022 0207 	bic.w	r2, r2, #7
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f013 0f02 	tst.w	r3, #2
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	f013 0f04 	tst.w	r3, #4
 8001d4c:	d007      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d5c:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	f013 0f08 	tst.w	r3, #8
 8001d64:	d007      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001d74:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d7e:	6853      	ldr	r3, [r2, #4]
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d84:	68a0      	ldr	r0, [r4, #8]
 8001d86:	4303      	orrs	r3, r0
 8001d88:	6053      	str	r3, [r2, #4]
 8001d8a:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	f013 0f01 	tst.w	r3, #1
 8001d92:	d041      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x114>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d94:	6863      	ldr	r3, [r4, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d02a      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d032      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f012 0f02 	tst.w	r2, #2
 8001dac:	f000 8089 	beq.w	8001ec2 <HAL_RCC_ClockConfig+0x1be>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001db8:	6851      	ldr	r1, [r2, #4]
 8001dba:	f021 0103 	bic.w	r1, r1, #3
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8001dc2:	f7fe fc4a 	bl	800065a <HAL_GetTick>
 8001dc6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	6862      	ldr	r2, [r4, #4]
 8001dd8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dde:	f7fe fc3c 	bl	800065a <HAL_GetTick>
 8001de2:	1b80      	subs	r0, r0, r6
 8001de4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001de8:	4298      	cmp	r0, r3
 8001dea:	d9ed      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e7a6      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001dfe:	d1d7      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
 8001e02:	e79c      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e12:	d1cd      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
 8001e16:	e792      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	d90f      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f022 0207 	bic.w	r2, r2, #7
 8001e38:	432a      	orrs	r2, r5
 8001e3a:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	42ab      	cmp	r3, r5
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	e779      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f013 0f04 	tst.w	r3, #4
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e5a:	6853      	ldr	r3, [r2, #4]
 8001e5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e60:	68e1      	ldr	r1, [r4, #12]
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f013 0f08 	tst.w	r3, #8
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e76:	6853      	ldr	r3, [r2, #4]
 8001e78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e7c:	6921      	ldr	r1, [r4, #16]
 8001e7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e82:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e84:	f7ff fefd 	bl	8001c82 <HAL_RCC_GetSysClockFreq>
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e96:	f244 620c 	movw	r2, #17932	; 0x460c
 8001e9a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	40d8      	lsrs	r0, r3
 8001ea2:	f240 0328 	movw	r3, #40	; 0x28
 8001ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eaa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001eac:	f240 0330 	movw	r3, #48	; 0x30
 8001eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	f7fe fb88 	bl	80005ca <HAL_InitTick>
  return HAL_OK;
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e73f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
}
 8001ec0:	4770      	bx	lr
        return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e73b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x3a>

08001ec6 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec6:	b570      	push	{r4, r5, r6, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ecc:	6803      	ldr	r3, [r0, #0]
 8001ece:	f013 0f01 	tst.w	r3, #1
 8001ed2:	d049      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ee2:	d160      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef2:	61da      	str	r2, [r3, #28]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001efe:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f0e:	d04c      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xe4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f18:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f1e:	d017      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001f20:	6862      	ldr	r2, [r4, #4]
 8001f22:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d012      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f38:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001f3c:	f2c4 2242 	movt	r2, #16962	; 0x4242
 8001f40:	2601      	movs	r6, #1
 8001f42:	6016      	str	r6, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f44:	2600      	movs	r6, #0
 8001f46:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f48:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f4a:	f011 0f01 	tst.w	r1, #1
 8001f4e:	d146      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f58:	6a13      	ldr	r3, [r2, #32]
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5e:	6861      	ldr	r1, [r4, #4]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	2d00      	cmp	r5, #0
 8001f66:	d14e      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	f013 0f02 	tst.w	r3, #2
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f78:	6853      	ldr	r3, [r2, #4]
 8001f7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f7e:	68a1      	ldr	r1, [r4, #8]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f013 0f10 	tst.w	r3, #16
 8001f8a:	d045      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f94:	6853      	ldr	r3, [r2, #4]
 8001f96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f9a:	68e1      	ldr	r1, [r4, #12]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001fa0:	2000      	movs	r0, #0
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	e7aa      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001fae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fba:	f7fe fb4e 	bl	800065a <HAL_GetTick>
 8001fbe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001fc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fce:	d19f      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fb43 	bl	800065a <HAL_GetTick>
 8001fd4:	1b80      	subs	r0, r0, r6
 8001fd6:	2864      	cmp	r0, #100	; 0x64
 8001fd8:	d9f2      	bls.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8001fda:	2003      	movs	r0, #3
 8001fdc:	e7e1      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8001fde:	f7fe fb3c 	bl	800065a <HAL_GetTick>
 8001fe2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f013 0f02 	tst.w	r3, #2
 8001ff2:	d1ad      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fb31 	bl	800065a <HAL_GetTick>
 8001ff8:	1b80      	subs	r0, r0, r6
 8001ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ffe:	4298      	cmp	r0, r3
 8002000:	d9f0      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 8002002:	2003      	movs	r0, #3
 8002004:	e7cd      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002014:	61da      	str	r2, [r3, #28]
 8002016:	e7a7      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  return HAL_OK;
 8002018:	2000      	movs	r0, #0
 800201a:	e7c2      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0xdc>

0800201c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800201c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800201e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002020:	6a04      	ldr	r4, [r0, #32]
 8002022:	f024 0401 	bic.w	r4, r4, #1
 8002026:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002028:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800202a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800202e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002032:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002036:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002038:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800203a:	6203      	str	r3, [r0, #32]
}
 800203c:	bc10      	pop	{r4}
 800203e:	4770      	bx	lr

08002040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002042:	6a03      	ldr	r3, [r0, #32]
 8002044:	f023 0310 	bic.w	r3, r3, #16
 8002048:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800204c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002052:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800205a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800205e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002060:	6203      	str	r3, [r0, #32]
}
 8002062:	bc10      	pop	{r4}
 8002064:	4770      	bx	lr

08002066 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002066:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800206c:	4319      	orrs	r1, r3
 800206e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002072:	6081      	str	r1, [r0, #8]
}
 8002074:	4770      	bx	lr

08002076 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002076:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d001      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800208a:	6802      	ldr	r2, [r0, #0]
 800208c:	68d3      	ldr	r3, [r2, #12]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	6803      	ldr	r3, [r0, #0]
 8002096:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800209a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800209e:	4293      	cmp	r3, r2
 80020a0:	d014      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x56>
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d011      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x56>
 80020a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x56>
 80020b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80020bc:	4293      	cmp	r3, r2
 80020be:	d005      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x56>
    __HAL_TIM_ENABLE(htim);
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020c8:	2000      	movs	r0, #0
 80020ca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	2a06      	cmp	r2, #6
 80020d4:	d005      	beq.n	80020e2 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020de:	2000      	movs	r0, #0
 80020e0:	4770      	bx	lr
 80020e2:	2000      	movs	r0, #0
}
 80020e4:	4770      	bx	lr

080020e6 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80020e6:	6802      	ldr	r2, [r0, #0]
 80020e8:	68d3      	ldr	r3, [r2, #12]
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80020f0:	6803      	ldr	r3, [r0, #0]
 80020f2:	6a19      	ldr	r1, [r3, #32]
 80020f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80020f8:	4211      	tst	r1, r2
 80020fa:	d108      	bne.n	800210e <HAL_TIM_Base_Stop_IT+0x28>
 80020fc:	6a19      	ldr	r1, [r3, #32]
 80020fe:	f240 4244 	movw	r2, #1092	; 0x444
 8002102:	4211      	tst	r1, r2
 8002104:	d103      	bne.n	800210e <HAL_TIM_Base_Stop_IT+0x28>
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800210e:	2301      	movs	r3, #1
 8002110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002114:	2000      	movs	r0, #0
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_PeriodElapsedCallback>:
}
 8002118:	4770      	bx	lr

0800211a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
}
 800211c:	4770      	bx	lr

0800211e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
}
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_IRQHandler>:
{
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	f012 0f02 	tst.w	r2, #2
 800212e:	d011      	beq.n	8002154 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	f012 0f02 	tst.w	r2, #2
 8002136:	d00d      	beq.n	8002154 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002138:	f06f 0202 	mvn.w	r2, #2
 800213c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213e:	2301      	movs	r3, #1
 8002140:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f013 0f03 	tst.w	r3, #3
 800214a:	d070      	beq.n	800222e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800214c:	f7ff ffe6 	bl	800211c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	2300      	movs	r3, #0
 8002152:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	f012 0f04 	tst.w	r2, #4
 800215c:	d012      	beq.n	8002184 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	f012 0f04 	tst.w	r2, #4
 8002164:	d00e      	beq.n	8002184 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002166:	f06f 0204 	mvn.w	r2, #4
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216c:	2302      	movs	r3, #2
 800216e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002178:	d05f      	beq.n	800223a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff ffce 	bl	800211c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002180:	2300      	movs	r3, #0
 8002182:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	f012 0f08 	tst.w	r2, #8
 800218c:	d012      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	f012 0f08 	tst.w	r2, #8
 8002194:	d00e      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002196:	f06f 0208 	mvn.w	r2, #8
 800219a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219c:	2304      	movs	r3, #4
 800219e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f013 0f03 	tst.w	r3, #3
 80021a8:	d04e      	beq.n	8002248 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ffb6 	bl	800211c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b0:	2300      	movs	r3, #0
 80021b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	f012 0f10 	tst.w	r2, #16
 80021bc:	d012      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	f012 0f10 	tst.w	r2, #16
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021c6:	f06f 0210 	mvn.w	r2, #16
 80021ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021cc:	2308      	movs	r3, #8
 80021ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021d8:	d03d      	beq.n	8002256 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff9e 	bl	800211c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e0:	2300      	movs	r3, #0
 80021e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	f012 0f01 	tst.w	r2, #1
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	f012 0f01 	tst.w	r2, #1
 80021f4:	d136      	bne.n	8002264 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80021fe:	d003      	beq.n	8002208 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002206:	d134      	bne.n	8002272 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002218:	d132      	bne.n	8002280 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	f012 0f20 	tst.w	r2, #32
 8002222:	d003      	beq.n	800222c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	f012 0f20 	tst.w	r2, #32
 800222a:	d130      	bne.n	800228e <HAL_TIM_IRQHandler+0x16c>
}
 800222c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	f7ff ff74 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff ff73 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
 8002238:	e78a      	b.n	8002150 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff6d 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff ff6c 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
 8002246:	e79b      	b.n	8002180 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ff66 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff65 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
 8002254:	e7ac      	b.n	80021b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff5f 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff ff5e 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
 8002262:	e7bd      	b.n	80021e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002264:	f06f 0201 	mvn.w	r2, #1
 8002268:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff ff54 	bl	8002118 <HAL_TIM_PeriodElapsedCallback>
 8002270:	e7c1      	b.n	80021f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002272:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002276:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002278:	4620      	mov	r0, r4
 800227a:	f000 f934 	bl	80024e6 <HAL_TIMEx_BreakCallback>
 800227e:	e7c3      	b.n	8002208 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002284:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff ff4a 	bl	8002120 <HAL_TIM_TriggerCallback>
 800228c:	e7c5      	b.n	800221a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800228e:	f06f 0220 	mvn.w	r2, #32
 8002292:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002294:	4620      	mov	r0, r4
 8002296:	f000 f925 	bl	80024e4 <HAL_TIMEx_CommutCallback>
}
 800229a:	e7c7      	b.n	800222c <HAL_TIM_IRQHandler+0x10a>

0800229c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800229c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800229e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80022a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d00e      	beq.n	80022c8 <TIM_Base_SetConfig+0x2c>
 80022aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x2c>
 80022b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80022b8:	4290      	cmp	r0, r2
 80022ba:	d005      	beq.n	80022c8 <TIM_Base_SetConfig+0x2c>
 80022bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80022c4:	4290      	cmp	r0, r2
 80022c6:	d103      	bne.n	80022d0 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022cc:	684a      	ldr	r2, [r1, #4]
 80022ce:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d0:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80022d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80022d8:	4290      	cmp	r0, r2
 80022da:	d00e      	beq.n	80022fa <TIM_Base_SetConfig+0x5e>
 80022dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0x5e>
 80022e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80022ea:	4290      	cmp	r0, r2
 80022ec:	d005      	beq.n	80022fa <TIM_Base_SetConfig+0x5e>
 80022ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d103      	bne.n	8002302 <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	68ca      	ldr	r2, [r1, #12]
 8002300:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002306:	694a      	ldr	r2, [r1, #20]
 8002308:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800230a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800230c:	688b      	ldr	r3, [r1, #8]
 800230e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002310:	680b      	ldr	r3, [r1, #0]
 8002312:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002314:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002318:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800231c:	4298      	cmp	r0, r3
 800231e:	d002      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
  TIMx->EGR = TIM_EGR_UG;
 8002320:	2301      	movs	r3, #1
 8002322:	6143      	str	r3, [r0, #20]
}
 8002324:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002326:	690b      	ldr	r3, [r1, #16]
 8002328:	6303      	str	r3, [r0, #48]	; 0x30
 800232a:	e7f9      	b.n	8002320 <TIM_Base_SetConfig+0x84>

0800232c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800232c:	b338      	cbz	r0, 800237e <HAL_TIM_Base_Init+0x52>
{
 800232e:	b510      	push	{r4, lr}
 8002330:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002336:	b1eb      	cbz	r3, 8002374 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	2302      	movs	r3, #2
 800233a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233e:	1d21      	adds	r1, r4, #4
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	f7ff ffab 	bl	800229c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002346:	2301      	movs	r3, #1
 8002348:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002350:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002354:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002358:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002364:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800236c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002370:	2000      	movs	r0, #0
}
 8002372:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002374:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002378:	f7fe f896 	bl	80004a8 <HAL_TIM_Base_MspInit>
 800237c:	e7dc      	b.n	8002338 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
}
 8002380:	4770      	bx	lr

08002382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002382:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002384:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002386:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800238a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800238e:	430b      	orrs	r3, r1
 8002390:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	6083      	str	r3, [r0, #8]
}
 8002394:	bc10      	pop	{r4}
 8002396:	4770      	bx	lr

08002398 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d066      	beq.n	800246e <HAL_TIM_ConfigClockSource+0xd6>
{
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80023a4:	2301      	movs	r3, #1
 80023a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80023b0:	6802      	ldr	r2, [r0, #0]
 80023b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80023bc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80023be:	680b      	ldr	r3, [r1, #0]
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d04a      	beq.n	800245a <HAL_TIM_ConfigClockSource+0xc2>
 80023c4:	d913      	bls.n	80023ee <HAL_TIM_ConfigClockSource+0x56>
 80023c6:	2b60      	cmp	r3, #96	; 0x60
 80023c8:	d03d      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xae>
 80023ca:	d91e      	bls.n	800240a <HAL_TIM_ConfigClockSource+0x72>
 80023cc:	2b70      	cmp	r3, #112	; 0x70
 80023ce:	d028      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x8a>
 80023d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d4:	d130      	bne.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80023d6:	68cb      	ldr	r3, [r1, #12]
 80023d8:	684a      	ldr	r2, [r1, #4]
 80023da:	6889      	ldr	r1, [r1, #8]
 80023dc:	6800      	ldr	r0, [r0, #0]
 80023de:	f7ff ffd0 	bl	8002382 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	6893      	ldr	r3, [r2, #8]
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ea:	6093      	str	r3, [r2, #8]
      break;
 80023ec:	e024      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d006      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0x68>
 80023f2:	d904      	bls.n	80023fe <HAL_TIM_ConfigClockSource+0x66>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d003      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0x68>
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0x68>
 80023fc:	e01c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
 80023fe:	b9db      	cbnz	r3, 8002438 <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002400:	4619      	mov	r1, r3
 8002402:	6820      	ldr	r0, [r4, #0]
 8002404:	f7ff fe2f 	bl	8002066 <TIM_ITRx_SetConfig>
        break;
 8002408:	e016      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800240a:	2b50      	cmp	r3, #80	; 0x50
 800240c:	d114      	bne.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	68ca      	ldr	r2, [r1, #12]
 8002410:	6849      	ldr	r1, [r1, #4]
 8002412:	6800      	ldr	r0, [r0, #0]
 8002414:	f7ff fe02 	bl	800201c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002418:	2150      	movs	r1, #80	; 0x50
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	f7ff fe23 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8002420:	e00a      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	68cb      	ldr	r3, [r1, #12]
 8002424:	684a      	ldr	r2, [r1, #4]
 8002426:	6889      	ldr	r1, [r1, #8]
 8002428:	6800      	ldr	r0, [r0, #0]
 800242a:	f7ff ffaa 	bl	8002382 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800242e:	6822      	ldr	r2, [r4, #0]
 8002430:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002432:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002436:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002438:	2301      	movs	r3, #1
 800243a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800243e:	2000      	movs	r0, #0
 8002440:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002444:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	68ca      	ldr	r2, [r1, #12]
 8002448:	6849      	ldr	r1, [r1, #4]
 800244a:	6800      	ldr	r0, [r0, #0]
 800244c:	f7ff fdf8 	bl	8002040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002450:	2160      	movs	r1, #96	; 0x60
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	f7ff fe07 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8002458:	e7ee      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	68ca      	ldr	r2, [r1, #12]
 800245c:	6849      	ldr	r1, [r1, #4]
 800245e:	6800      	ldr	r0, [r0, #0]
 8002460:	f7ff fddc 	bl	800201c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	f7ff fdfd 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 800246c:	e7e4      	b.n	8002438 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800246e:	2002      	movs	r0, #2
}
 8002470:	4770      	bx	lr

08002472 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002472:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d032      	beq.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
{
 800247a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800247c:	2301      	movs	r3, #1
 800247e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002488:	6803      	ldr	r3, [r0, #0]
 800248a:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800248e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002492:	680a      	ldr	r2, [r1, #0]
 8002494:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002496:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002498:	6803      	ldr	r3, [r0, #0]
 800249a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800249e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d00b      	beq.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80024ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d005      	beq.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80024b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d104      	bne.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c8:	684a      	ldr	r2, [r1, #4]
 80024ca:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024cc:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d4:	2300      	movs	r3, #0
 80024d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80024da:	4618      	mov	r0, r3
}
 80024dc:	bc30      	pop	{r4, r5}
 80024de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80024e0:	2002      	movs	r0, #2
}
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e6:	4770      	bx	lr

080024e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80024e8:	b084      	sub	sp, #16
 80024ea:	a801      	add	r0, sp, #4
 80024ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80024f0:	2000      	movs	r0, #0
 80024f2:	b004      	add	sp, #16
 80024f4:	4770      	bx	lr

080024f6 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80024fc:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8002500:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002504:	4618      	mov	r0, r3
 8002506:	4770      	bx	lr

08002508 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002508:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800250c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002510:	045b      	lsls	r3, r3, #17
 8002512:	0c5b      	lsrs	r3, r3, #17
 8002514:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002518:	2000      	movs	r0, #0
 800251a:	4770      	bx	lr

0800251c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800251c:	2000      	movs	r0, #0
 800251e:	4770      	bx	lr

08002520 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002520:	b084      	sub	sp, #16
 8002522:	b410      	push	{r4}
 8002524:	ac02      	add	r4, sp, #8
 8002526:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800252a:	2301      	movs	r3, #1
 800252c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002536:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800253a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 800253e:	4618      	mov	r0, r3
 8002540:	bc10      	pop	{r4}
 8002542:	b004      	add	sp, #16
 8002544:	4770      	bx	lr

08002546 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002546:	b430      	push	{r4, r5}
 8002548:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800254a:	780c      	ldrb	r4, [r1, #0]
 800254c:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002550:	b292      	uxth	r2, r2
 8002552:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002556:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800255a:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800255c:	78c8      	ldrb	r0, [r1, #3]
 800255e:	2803      	cmp	r0, #3
 8002560:	d85a      	bhi.n	8002618 <USB_ActivateEndpoint+0xd2>
 8002562:	e8df f000 	tbb	[pc, r0]
 8002566:	554d      	.short	0x554d
 8002568:	5102      	.short	0x5102
  HAL_StatusTypeDef ret = HAL_OK;
 800256a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800256c:	f248 0580 	movw	r5, #32896	; 0x8080
 8002570:	432a      	orrs	r2, r5
 8002572:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002576:	780c      	ldrb	r4, [r1, #0]
 8002578:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800257c:	b292      	uxth	r2, r2
 800257e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002582:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002586:	4322      	orrs	r2, r4
 8002588:	432a      	orrs	r2, r5
 800258a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 800258e:	7b0a      	ldrb	r2, [r1, #12]
 8002590:	2a00      	cmp	r2, #0
 8002592:	f040 80b1 	bne.w	80026f8 <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 8002596:	784a      	ldrb	r2, [r1, #1]
 8002598:	2a00      	cmp	r2, #0
 800259a:	d04e      	beq.n	800263a <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800259c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80025a0:	441a      	add	r2, r3
 80025a2:	780c      	ldrb	r4, [r1, #0]
 80025a4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80025a8:	88cc      	ldrh	r4, [r1, #6]
 80025aa:	0864      	lsrs	r4, r4, #1
 80025ac:	0064      	lsls	r4, r4, #1
 80025ae:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025b2:	780c      	ldrb	r4, [r1, #0]
 80025b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025bc:	d00c      	beq.n	80025d8 <USB_ActivateEndpoint+0x92>
 80025be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025c2:	b292      	uxth	r2, r2
 80025c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80025d4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80025d8:	78ca      	ldrb	r2, [r1, #3]
 80025da:	2a01      	cmp	r2, #1
 80025dc:	d01e      	beq.n	800261c <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80025de:	7809      	ldrb	r1, [r1, #0]
 80025e0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80025e4:	b292      	uxth	r2, r2
 80025e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	f082 0220 	eor.w	r2, r2, #32
 80025f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025fa:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80025fe:	e060      	b.n	80026c2 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002604:	2000      	movs	r0, #0
      break;
 8002606:	e7b1      	b.n	800256c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002608:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800260c:	2000      	movs	r0, #0
      break;
 800260e:	e7ad      	b.n	800256c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002614:	2000      	movs	r0, #0
      break;
 8002616:	e7a9      	b.n	800256c <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8002618:	2001      	movs	r0, #1
 800261a:	e7a7      	b.n	800256c <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800261c:	7809      	ldrb	r1, [r1, #0]
 800261e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002622:	b292      	uxth	r2, r2
 8002624:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002634:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002638:	e043      	b.n	80026c2 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800263a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800263e:	441a      	add	r2, r3
 8002640:	780c      	ldrb	r4, [r1, #0]
 8002642:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002646:	88cc      	ldrh	r4, [r1, #6]
 8002648:	0864      	lsrs	r4, r4, #1
 800264a:	0064      	lsls	r4, r4, #1
 800264c:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002650:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002654:	441a      	add	r2, r3
 8002656:	780c      	ldrb	r4, [r1, #0]
 8002658:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800265c:	690c      	ldr	r4, [r1, #16]
 800265e:	bb94      	cbnz	r4, 80026c6 <USB_ActivateEndpoint+0x180>
 8002660:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8002664:	b2a4      	uxth	r4, r4
 8002666:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800266a:	b2a4      	uxth	r4, r4
 800266c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8002670:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8002674:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002678:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800267c:	780c      	ldrb	r4, [r1, #0]
 800267e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002682:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002686:	d00c      	beq.n	80026a2 <USB_ActivateEndpoint+0x15c>
 8002688:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800268c:	b292      	uxth	r2, r2
 800268e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002692:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002696:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800269a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026a2:	7809      	ldrb	r1, [r1, #0]
 80026a4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80026a8:	b292      	uxth	r2, r2
 80026aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026b2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026be:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80026c2:	bc30      	pop	{r4, r5}
 80026c4:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026c6:	2c3e      	cmp	r4, #62	; 0x3e
 80026c8:	d809      	bhi.n	80026de <USB_ActivateEndpoint+0x198>
 80026ca:	0865      	lsrs	r5, r4, #1
 80026cc:	f014 0f01 	tst.w	r4, #1
 80026d0:	d000      	beq.n	80026d4 <USB_ActivateEndpoint+0x18e>
 80026d2:	3501      	adds	r5, #1
 80026d4:	02ad      	lsls	r5, r5, #10
 80026d6:	b2ad      	uxth	r5, r5
 80026d8:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 80026dc:	e7ce      	b.n	800267c <USB_ActivateEndpoint+0x136>
 80026de:	0965      	lsrs	r5, r4, #5
 80026e0:	f014 0f1f 	tst.w	r4, #31
 80026e4:	d100      	bne.n	80026e8 <USB_ActivateEndpoint+0x1a2>
 80026e6:	3d01      	subs	r5, #1
 80026e8:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 80026ec:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80026f0:	b2a4      	uxth	r4, r4
 80026f2:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80026f6:	e7c1      	b.n	800267c <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80026f8:	780c      	ldrb	r4, [r1, #0]
 80026fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026fe:	b292      	uxth	r2, r2
 8002700:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002708:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800270c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002710:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002714:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002718:	441a      	add	r2, r3
 800271a:	780c      	ldrb	r4, [r1, #0]
 800271c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002720:	890c      	ldrh	r4, [r1, #8]
 8002722:	0864      	lsrs	r4, r4, #1
 8002724:	0064      	lsls	r4, r4, #1
 8002726:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 800272a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800272e:	441a      	add	r2, r3
 8002730:	780c      	ldrb	r4, [r1, #0]
 8002732:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002736:	894c      	ldrh	r4, [r1, #10]
 8002738:	0864      	lsrs	r4, r4, #1
 800273a:	0064      	lsls	r4, r4, #1
 800273c:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8002740:	784a      	ldrb	r2, [r1, #1]
 8002742:	2a00      	cmp	r2, #0
 8002744:	d140      	bne.n	80027c8 <USB_ActivateEndpoint+0x282>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002746:	780c      	ldrb	r4, [r1, #0]
 8002748:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800274c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002750:	d00c      	beq.n	800276c <USB_ActivateEndpoint+0x226>
 8002752:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002756:	b292      	uxth	r2, r2
 8002758:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800275c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002760:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002768:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800276c:	780c      	ldrb	r4, [r1, #0]
 800276e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002772:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002776:	d00c      	beq.n	8002792 <USB_ActivateEndpoint+0x24c>
 8002778:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800277c:	b292      	uxth	r2, r2
 800277e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002782:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800278e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002792:	780d      	ldrb	r5, [r1, #0]
 8002794:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002798:	b292      	uxth	r2, r2
 800279a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800279e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80027a6:	f248 0480 	movw	r4, #32896	; 0x8080
 80027aa:	4322      	orrs	r2, r4
 80027ac:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027b0:	7809      	ldrb	r1, [r1, #0]
 80027b2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80027b6:	b292      	uxth	r2, r2
 80027b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	4322      	orrs	r2, r4
 80027c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80027c6:	e77c      	b.n	80026c2 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027c8:	780c      	ldrb	r4, [r1, #0]
 80027ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027ce:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80027d2:	d00c      	beq.n	80027ee <USB_ActivateEndpoint+0x2a8>
 80027d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027d8:	b292      	uxth	r2, r2
 80027da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80027e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027ee:	780c      	ldrb	r4, [r1, #0]
 80027f0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027f8:	d00c      	beq.n	8002814 <USB_ActivateEndpoint+0x2ce>
 80027fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027fe:	b292      	uxth	r2, r2
 8002800:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002804:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002810:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002814:	78ca      	ldrb	r2, [r1, #3]
 8002816:	2a01      	cmp	r2, #1
 8002818:	d01e      	beq.n	8002858 <USB_ActivateEndpoint+0x312>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800281a:	780c      	ldrb	r4, [r1, #0]
 800281c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002820:	b292      	uxth	r2, r2
 8002822:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282a:	f082 0220 	eor.w	r2, r2, #32
 800282e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002836:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800283a:	7809      	ldrb	r1, [r1, #0]
 800283c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002840:	b292      	uxth	r2, r2
 8002842:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002852:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002856:	e734      	b.n	80026c2 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002858:	780c      	ldrb	r4, [r1, #0]
 800285a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800285e:	b292      	uxth	r2, r2
 8002860:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002870:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002874:	e7e1      	b.n	800283a <USB_ActivateEndpoint+0x2f4>

08002876 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002876:	7b0b      	ldrb	r3, [r1, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d146      	bne.n	800290a <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800287c:	784b      	ldrb	r3, [r1, #1]
 800287e:	b313      	cbz	r3, 80028c6 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002880:	780a      	ldrb	r2, [r1, #0]
 8002882:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002886:	f013 0f40 	tst.w	r3, #64	; 0x40
 800288a:	d00c      	beq.n	80028a6 <USB_DeactivateEndpoint+0x30>
 800288c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028a6:	780a      	ldrb	r2, [r1, #0]
 80028a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80028c2:	2000      	movs	r0, #0
 80028c4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028c6:	780a      	ldrb	r2, [r1, #0]
 80028c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80028d0:	d00c      	beq.n	80028ec <USB_DeactivateEndpoint+0x76>
 80028d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028ec:	780a      	ldrb	r2, [r1, #0]
 80028ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002904:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002908:	e7db      	b.n	80028c2 <USB_DeactivateEndpoint+0x4c>
{
 800290a:	b410      	push	{r4}
    if (ep->is_in == 0U)
 800290c:	784b      	ldrb	r3, [r1, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d14e      	bne.n	80029b0 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002912:	780a      	ldrb	r2, [r1, #0]
 8002914:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002918:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800291c:	d00c      	beq.n	8002938 <USB_DeactivateEndpoint+0xc2>
 800291e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002938:	780a      	ldrb	r2, [r1, #0]
 800293a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800293e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002942:	d00c      	beq.n	800295e <USB_DeactivateEndpoint+0xe8>
 8002944:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800295a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800295e:	780a      	ldrb	r2, [r1, #0]
 8002960:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002976:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800297a:	780b      	ldrb	r3, [r1, #0]
 800297c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002980:	b292      	uxth	r2, r2
 8002982:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800298a:	f248 0480 	movw	r4, #32896	; 0x8080
 800298e:	4322      	orrs	r2, r4
 8002990:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002994:	780a      	ldrb	r2, [r1, #0]
 8002996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a4:	4323      	orrs	r3, r4
 80029a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80029aa:	2000      	movs	r0, #0
 80029ac:	bc10      	pop	{r4}
 80029ae:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029b0:	780a      	ldrb	r2, [r1, #0]
 80029b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80029ba:	d00c      	beq.n	80029d6 <USB_DeactivateEndpoint+0x160>
 80029bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029d6:	780a      	ldrb	r2, [r1, #0]
 80029d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029e0:	d00c      	beq.n	80029fc <USB_DeactivateEndpoint+0x186>
 80029e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80029fc:	780a      	ldrb	r2, [r1, #0]
 80029fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a18:	780b      	ldrb	r3, [r1, #0]
 8002a1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a28:	f248 0480 	movw	r4, #32896	; 0x8080
 8002a2c:	4322      	orrs	r2, r4
 8002a2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a32:	780a      	ldrb	r2, [r1, #0]
 8002a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	4323      	orrs	r3, r4
 8002a44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a48:	e7af      	b.n	80029aa <USB_DeactivateEndpoint+0x134>

08002a4a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002a4a:	784b      	ldrb	r3, [r1, #1]
 8002a4c:	b98b      	cbnz	r3, 8002a72 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002a4e:	780a      	ldrb	r2, [r1, #0]
 8002a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002a72:	780a      	ldrb	r2, [r1, #0]
 8002a74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a82:	f083 0310 	eor.w	r3, r3, #16
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a92:	e7ec      	b.n	8002a6e <USB_EPSetStall+0x24>

08002a94 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002a94:	7b0b      	ldrb	r3, [r1, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d14b      	bne.n	8002b32 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8002a9a:	784b      	ldrb	r3, [r1, #1]
 8002a9c:	b333      	cbz	r3, 8002aec <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a9e:	780a      	ldrb	r2, [r1, #0]
 8002aa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aa4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aa8:	d00c      	beq.n	8002ac4 <USB_EPClearStall+0x30>
 8002aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ac0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002ac4:	78cb      	ldrb	r3, [r1, #3]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d033      	beq.n	8002b32 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002aca:	780a      	ldrb	r2, [r1, #0]
 8002acc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ada:	f083 0320 	eor.w	r3, r3, #32
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002aea:	e022      	b.n	8002b32 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aec:	780a      	ldrb	r2, [r1, #0]
 8002aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002af2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002af6:	d00c      	beq.n	8002b12 <USB_EPClearStall+0x7e>
 8002af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b12:	780a      	ldrb	r2, [r1, #0]
 8002b14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002b32:	2000      	movs	r0, #0
 8002b34:	4770      	bx	lr

08002b36 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002b36:	b911      	cbnz	r1, 8002b3e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002b3e:	2000      	movs	r0, #0
 8002b40:	4770      	bx	lr

08002b42 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002b42:	2000      	movs	r0, #0
 8002b44:	4770      	bx	lr

08002b46 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002b46:	2000      	movs	r0, #0
 8002b48:	4770      	bx	lr

08002b4a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002b4a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002b4e:	4770      	bx	lr

08002b50 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b50:	2000      	movs	r0, #0
 8002b52:	4770      	bx	lr

08002b54 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002b54:	3301      	adds	r3, #1
 8002b56:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b58:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8002b60:	b163      	cbz	r3, 8002b7c <USB_WritePMA+0x28>
{
 8002b62:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 8002b64:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002b66:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8002b68:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8002b6c:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8002b70:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8002b72:	3b01      	subs	r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f5      	bne.n	8002b64 <USB_WritePMA+0x10>
  }
}
 8002b78:	bc10      	pop	{r4}
 8002b7a:	4770      	bx	lr
 8002b7c:	4770      	bx	lr

08002b7e <USB_EPStartXfer>:
{
 8002b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002b80:	784a      	ldrb	r2, [r1, #1]
 8002b82:	2a01      	cmp	r2, #1
 8002b84:	d033      	beq.n	8002bee <USB_EPStartXfer+0x70>
    if (ep->doublebuffer == 0U)
 8002b86:	7b0b      	ldrb	r3, [r1, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 827c 	bne.w	8003086 <USB_EPStartXfer+0x508>
      if (ep->xfer_len > ep->maxpacket)
 8002b8e:	698b      	ldr	r3, [r1, #24]
 8002b90:	690a      	ldr	r2, [r1, #16]
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f240 825a 	bls.w	800304c <USB_EPStartXfer+0x4ce>
        ep->xfer_len -= len;
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002b9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ba0:	4403      	add	r3, r0
 8002ba2:	780c      	ldrb	r4, [r1, #0]
 8002ba4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	f040 8253 	bne.w	8003054 <USB_EPStartXfer+0x4d6>
 8002bae:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002bbe:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bca:	780a      	ldrb	r2, [r1, #0]
 8002bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 8002bea:	2000      	movs	r0, #0
}
 8002bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002bee:	698e      	ldr	r6, [r1, #24]
 8002bf0:	690f      	ldr	r7, [r1, #16]
 8002bf2:	42be      	cmp	r6, r7
 8002bf4:	d900      	bls.n	8002bf8 <USB_EPStartXfer+0x7a>
      len = ep->maxpacket;
 8002bf6:	463e      	mov	r6, r7
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 8002bfc:	7b0b      	ldrb	r3, [r1, #12]
 8002bfe:	b31b      	cbz	r3, 8002c48 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 8002c00:	78cb      	ldrb	r3, [r1, #3]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d040      	beq.n	8002c88 <USB_EPStartXfer+0x10a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c06:	780b      	ldrb	r3, [r1, #0]
 8002c08:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8002c0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c10:	f000 81d1 	beq.w	8002fb6 <USB_EPStartXfer+0x438>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	f040 81ae 	bne.w	8002f76 <USB_EPStartXfer+0x3f8>
 8002c1a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c1e:	4402      	add	r2, r0
 8002c20:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002c24:	2e00      	cmp	r6, #0
 8002c26:	f040 818d 	bne.w	8002f44 <USB_EPStartXfer+0x3c6>
 8002c2a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c3a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c42:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c46:	e19e      	b.n	8002f86 <USB_EPStartXfer+0x408>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002c48:	b2b6      	uxth	r6, r6
 8002c4a:	4633      	mov	r3, r6
 8002c4c:	88ca      	ldrh	r2, [r1, #6]
 8002c4e:	6949      	ldr	r1, [r1, #20]
 8002c50:	f7ff ff80 	bl	8002b54 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c54:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002c58:	442b      	add	r3, r5
 8002c5a:	7822      	ldrb	r2, [r4, #0]
 8002c5c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002c60:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002c64:	7822      	ldrb	r2, [r4, #0]
 8002c66:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c74:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c80:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	e7b1      	b.n	8002bec <USB_EPStartXfer+0x6e>
        if (ep->xfer_len_db > ep->maxpacket)
 8002c88:	6a0b      	ldr	r3, [r1, #32]
 8002c8a:	429f      	cmp	r7, r3
 8002c8c:	f080 813e 	bcs.w	8002f0c <USB_EPStartXfer+0x38e>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002c90:	780a      	ldrb	r2, [r1, #0]
 8002c92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002cac:	6a0b      	ldr	r3, [r1, #32]
 8002cae:	1b9b      	subs	r3, r3, r6
 8002cb0:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002cb2:	780b      	ldrb	r3, [r1, #0]
 8002cb4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cb8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cbc:	f000 8093 	beq.w	8002de6 <USB_EPStartXfer+0x268>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cc0:	784a      	ldrb	r2, [r1, #1]
 8002cc2:	bb6a      	cbnz	r2, 8002d20 <USB_EPStartXfer+0x1a2>
 8002cc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cc8:	4402      	add	r2, r0
 8002cca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002cce:	b976      	cbnz	r6, 8002cee <USB_EPStartXfer+0x170>
 8002cd0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002ce0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002cec:	e01a      	b.n	8002d24 <USB_EPStartXfer+0x1a6>
 8002cee:	2e3e      	cmp	r6, #62	; 0x3e
 8002cf0:	d809      	bhi.n	8002d06 <USB_EPStartXfer+0x188>
 8002cf2:	0872      	lsrs	r2, r6, #1
 8002cf4:	f016 0f01 	tst.w	r6, #1
 8002cf8:	d000      	beq.n	8002cfc <USB_EPStartXfer+0x17e>
 8002cfa:	3201      	adds	r2, #1
 8002cfc:	0292      	lsls	r2, r2, #10
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d04:	e00e      	b.n	8002d24 <USB_EPStartXfer+0x1a6>
 8002d06:	0972      	lsrs	r2, r6, #5
 8002d08:	f016 0f1f 	tst.w	r6, #31
 8002d0c:	d100      	bne.n	8002d10 <USB_EPStartXfer+0x192>
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d14:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d1e:	e001      	b.n	8002d24 <USB_EPStartXfer+0x1a6>
 8002d20:	2a01      	cmp	r2, #1
 8002d22:	d027      	beq.n	8002d74 <USB_EPStartXfer+0x1f6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d24:	b2b3      	uxth	r3, r6
 8002d26:	8962      	ldrh	r2, [r4, #10]
 8002d28:	6961      	ldr	r1, [r4, #20]
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7ff ff12 	bl	8002b54 <USB_WritePMA>
            ep->xfer_buff += len;
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	4433      	add	r3, r6
 8002d34:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002d36:	6a23      	ldr	r3, [r4, #32]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d923      	bls.n	8002d86 <USB_EPStartXfer+0x208>
              ep->xfer_len_db -= len;
 8002d3e:	1b9b      	subs	r3, r3, r6
 8002d40:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d42:	7863      	ldrb	r3, [r4, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d13b      	bne.n	8002dc0 <USB_EPStartXfer+0x242>
 8002d48:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002d4c:	442b      	add	r3, r5
 8002d4e:	7822      	ldrb	r2, [r4, #0]
 8002d50:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d54:	b9de      	cbnz	r6, 8002d8e <USB_EPStartXfer+0x210>
 8002d56:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d60:	b292      	uxth	r2, r2
 8002d62:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002d66:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002d72:	e027      	b.n	8002dc4 <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d74:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d78:	4402      	add	r2, r0
 8002d7a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002d7e:	b2b2      	uxth	r2, r6
 8002d80:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d84:	e7ce      	b.n	8002d24 <USB_EPStartXfer+0x1a6>
              ep->xfer_len_db = 0U;
 8002d86:	2200      	movs	r2, #0
 8002d88:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002d8a:	461e      	mov	r6, r3
 8002d8c:	e7d9      	b.n	8002d42 <USB_EPStartXfer+0x1c4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d8e:	2e3e      	cmp	r6, #62	; 0x3e
 8002d90:	d809      	bhi.n	8002da6 <USB_EPStartXfer+0x228>
 8002d92:	0872      	lsrs	r2, r6, #1
 8002d94:	f016 0f01 	tst.w	r6, #1
 8002d98:	d000      	beq.n	8002d9c <USB_EPStartXfer+0x21e>
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	0292      	lsls	r2, r2, #10
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002da4:	e00e      	b.n	8002dc4 <USB_EPStartXfer+0x246>
 8002da6:	0972      	lsrs	r2, r6, #5
 8002da8:	f016 0f1f 	tst.w	r6, #31
 8002dac:	d100      	bne.n	8002db0 <USB_EPStartXfer+0x232>
 8002dae:	3a01      	subs	r2, #1
 8002db0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002db4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002dbe:	e001      	b.n	8002dc4 <USB_EPStartXfer+0x246>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d006      	beq.n	8002dd2 <USB_EPStartXfer+0x254>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dc4:	b2b3      	uxth	r3, r6
 8002dc6:	8922      	ldrh	r2, [r4, #8]
 8002dc8:	6961      	ldr	r1, [r4, #20]
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7ff fec2 	bl	8002b54 <USB_WritePMA>
 8002dd0:	e748      	b.n	8002c64 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dd2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002dd6:	442b      	add	r3, r5
 8002dd8:	7822      	ldrb	r2, [r4, #0]
 8002dda:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002dde:	b2b2      	uxth	r2, r6
 8002de0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002de4:	e7ee      	b.n	8002dc4 <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002de6:	784a      	ldrb	r2, [r1, #1]
 8002de8:	bb6a      	cbnz	r2, 8002e46 <USB_EPStartXfer+0x2c8>
 8002dea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dee:	4402      	add	r2, r0
 8002df0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002df4:	b976      	cbnz	r6, 8002e14 <USB_EPStartXfer+0x296>
 8002df6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e00:	b292      	uxth	r2, r2
 8002e02:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e06:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e12:	e01a      	b.n	8002e4a <USB_EPStartXfer+0x2cc>
 8002e14:	2e3e      	cmp	r6, #62	; 0x3e
 8002e16:	d809      	bhi.n	8002e2c <USB_EPStartXfer+0x2ae>
 8002e18:	0872      	lsrs	r2, r6, #1
 8002e1a:	f016 0f01 	tst.w	r6, #1
 8002e1e:	d000      	beq.n	8002e22 <USB_EPStartXfer+0x2a4>
 8002e20:	3201      	adds	r2, #1
 8002e22:	0292      	lsls	r2, r2, #10
 8002e24:	b292      	uxth	r2, r2
 8002e26:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e2a:	e00e      	b.n	8002e4a <USB_EPStartXfer+0x2cc>
 8002e2c:	0972      	lsrs	r2, r6, #5
 8002e2e:	f016 0f1f 	tst.w	r6, #31
 8002e32:	d100      	bne.n	8002e36 <USB_EPStartXfer+0x2b8>
 8002e34:	3a01      	subs	r2, #1
 8002e36:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e3a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e44:	e001      	b.n	8002e4a <USB_EPStartXfer+0x2cc>
 8002e46:	2a01      	cmp	r2, #1
 8002e48:	d027      	beq.n	8002e9a <USB_EPStartXfer+0x31c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e4a:	b2b3      	uxth	r3, r6
 8002e4c:	8922      	ldrh	r2, [r4, #8]
 8002e4e:	6961      	ldr	r1, [r4, #20]
 8002e50:	4628      	mov	r0, r5
 8002e52:	f7ff fe7f 	bl	8002b54 <USB_WritePMA>
            ep->xfer_buff += len;
 8002e56:	6963      	ldr	r3, [r4, #20]
 8002e58:	4433      	add	r3, r6
 8002e5a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002e5c:	6a23      	ldr	r3, [r4, #32]
 8002e5e:	6922      	ldr	r2, [r4, #16]
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d923      	bls.n	8002eac <USB_EPStartXfer+0x32e>
              ep->xfer_len_db -= len;
 8002e64:	1b9b      	subs	r3, r3, r6
 8002e66:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e68:	7863      	ldrb	r3, [r4, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13b      	bne.n	8002ee6 <USB_EPStartXfer+0x368>
 8002e6e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002e72:	442b      	add	r3, r5
 8002e74:	7822      	ldrb	r2, [r4, #0]
 8002e76:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002e7a:	b9de      	cbnz	r6, 8002eb4 <USB_EPStartXfer+0x336>
 8002e7c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002e80:	b292      	uxth	r2, r2
 8002e82:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e86:	b292      	uxth	r2, r2
 8002e88:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002e8c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e94:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002e98:	e027      	b.n	8002eea <USB_EPStartXfer+0x36c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e9e:	4402      	add	r2, r0
 8002ea0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002ea4:	b2b2      	uxth	r2, r6
 8002ea6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002eaa:	e7ce      	b.n	8002e4a <USB_EPStartXfer+0x2cc>
              ep->xfer_len_db = 0U;
 8002eac:	2200      	movs	r2, #0
 8002eae:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002eb0:	461e      	mov	r6, r3
 8002eb2:	e7d9      	b.n	8002e68 <USB_EPStartXfer+0x2ea>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002eb4:	2e3e      	cmp	r6, #62	; 0x3e
 8002eb6:	d809      	bhi.n	8002ecc <USB_EPStartXfer+0x34e>
 8002eb8:	0872      	lsrs	r2, r6, #1
 8002eba:	f016 0f01 	tst.w	r6, #1
 8002ebe:	d000      	beq.n	8002ec2 <USB_EPStartXfer+0x344>
 8002ec0:	3201      	adds	r2, #1
 8002ec2:	0292      	lsls	r2, r2, #10
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002eca:	e00e      	b.n	8002eea <USB_EPStartXfer+0x36c>
 8002ecc:	0972      	lsrs	r2, r6, #5
 8002ece:	f016 0f1f 	tst.w	r6, #31
 8002ed2:	d100      	bne.n	8002ed6 <USB_EPStartXfer+0x358>
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002eda:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002ee4:	e001      	b.n	8002eea <USB_EPStartXfer+0x36c>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d006      	beq.n	8002ef8 <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002eea:	b2b3      	uxth	r3, r6
 8002eec:	8962      	ldrh	r2, [r4, #10]
 8002eee:	6961      	ldr	r1, [r4, #20]
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f7ff fe2f 	bl	8002b54 <USB_WritePMA>
 8002ef6:	e6b5      	b.n	8002c64 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ef8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002efc:	442b      	add	r3, r5
 8002efe:	7822      	ldrb	r2, [r4, #0]
 8002f00:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002f04:	b2b2      	uxth	r2, r6
 8002f06:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002f0a:	e7ee      	b.n	8002eea <USB_EPStartXfer+0x36c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002f0c:	7809      	ldrb	r1, [r1, #0]
 8002f0e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f24:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f2c:	4402      	add	r2, r0
 8002f2e:	7821      	ldrb	r1, [r4, #0]
 8002f30:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f3a:	8922      	ldrh	r2, [r4, #8]
 8002f3c:	6961      	ldr	r1, [r4, #20]
 8002f3e:	f7ff fe09 	bl	8002b54 <USB_WritePMA>
 8002f42:	e68f      	b.n	8002c64 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f44:	2e3e      	cmp	r6, #62	; 0x3e
 8002f46:	d809      	bhi.n	8002f5c <USB_EPStartXfer+0x3de>
 8002f48:	0872      	lsrs	r2, r6, #1
 8002f4a:	f016 0f01 	tst.w	r6, #1
 8002f4e:	d000      	beq.n	8002f52 <USB_EPStartXfer+0x3d4>
 8002f50:	3201      	adds	r2, #1
 8002f52:	0292      	lsls	r2, r2, #10
 8002f54:	b292      	uxth	r2, r2
 8002f56:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002f5a:	e014      	b.n	8002f86 <USB_EPStartXfer+0x408>
 8002f5c:	0972      	lsrs	r2, r6, #5
 8002f5e:	f016 0f1f 	tst.w	r6, #31
 8002f62:	d100      	bne.n	8002f66 <USB_EPStartXfer+0x3e8>
 8002f64:	3a01      	subs	r2, #1
 8002f66:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002f6a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002f74:	e007      	b.n	8002f86 <USB_EPStartXfer+0x408>
 8002f76:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f7a:	4402      	add	r2, r0
 8002f7c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002f80:	b2b2      	uxth	r2, r6
 8002f82:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          pmabuffer = ep->pmaaddr1;
 8002f86:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f88:	b2b3      	uxth	r3, r6
 8002f8a:	6961      	ldr	r1, [r4, #20]
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7ff fde1 	bl	8002b54 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002f92:	7863      	ldrb	r3, [r4, #1]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d147      	bne.n	8003028 <USB_EPStartXfer+0x4aa>
 8002f98:	7822      	ldrb	r2, [r4, #0]
 8002f9a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fb0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002fb4:	e656      	b.n	8002c64 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002fb6:	bb6a      	cbnz	r2, 8003014 <USB_EPStartXfer+0x496>
 8002fb8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fbc:	4402      	add	r2, r0
 8002fbe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002fc2:	b976      	cbnz	r6, 8002fe2 <USB_EPStartXfer+0x464>
 8002fc4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002fd4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fdc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002fe0:	e020      	b.n	8003024 <USB_EPStartXfer+0x4a6>
 8002fe2:	2e3e      	cmp	r6, #62	; 0x3e
 8002fe4:	d809      	bhi.n	8002ffa <USB_EPStartXfer+0x47c>
 8002fe6:	0872      	lsrs	r2, r6, #1
 8002fe8:	f016 0f01 	tst.w	r6, #1
 8002fec:	d000      	beq.n	8002ff0 <USB_EPStartXfer+0x472>
 8002fee:	3201      	adds	r2, #1
 8002ff0:	0292      	lsls	r2, r2, #10
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002ff8:	e014      	b.n	8003024 <USB_EPStartXfer+0x4a6>
 8002ffa:	0972      	lsrs	r2, r6, #5
 8002ffc:	f016 0f1f 	tst.w	r6, #31
 8003000:	d100      	bne.n	8003004 <USB_EPStartXfer+0x486>
 8003002:	3a01      	subs	r2, #1
 8003004:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003008:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800300c:	b292      	uxth	r2, r2
 800300e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003012:	e007      	b.n	8003024 <USB_EPStartXfer+0x4a6>
 8003014:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003018:	4402      	add	r2, r0
 800301a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800301e:	b2b2      	uxth	r2, r6
 8003020:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          pmabuffer = ep->pmaaddr0;
 8003024:	8922      	ldrh	r2, [r4, #8]
 8003026:	e7af      	b.n	8002f88 <USB_EPStartXfer+0x40a>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003028:	2b01      	cmp	r3, #1
 800302a:	f47f ae1b 	bne.w	8002c64 <USB_EPStartXfer+0xe6>
 800302e:	7822      	ldrb	r2, [r4, #0]
 8003030:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800304a:	e60b      	b.n	8002c64 <USB_EPStartXfer+0xe6>
        ep->xfer_len = 0U;
 800304c:	2200      	movs	r2, #0
 800304e:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8003050:	461a      	mov	r2, r3
 8003052:	e5a3      	b.n	8002b9c <USB_EPStartXfer+0x1e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003054:	2a3e      	cmp	r2, #62	; 0x3e
 8003056:	d809      	bhi.n	800306c <USB_EPStartXfer+0x4ee>
 8003058:	0854      	lsrs	r4, r2, #1
 800305a:	f012 0f01 	tst.w	r2, #1
 800305e:	d000      	beq.n	8003062 <USB_EPStartXfer+0x4e4>
 8003060:	3401      	adds	r4, #1
 8003062:	02a4      	lsls	r4, r4, #10
 8003064:	b2a4      	uxth	r4, r4
 8003066:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 800306a:	e5ae      	b.n	8002bca <USB_EPStartXfer+0x4c>
 800306c:	0954      	lsrs	r4, r2, #5
 800306e:	f012 0f1f 	tst.w	r2, #31
 8003072:	d100      	bne.n	8003076 <USB_EPStartXfer+0x4f8>
 8003074:	3c01      	subs	r4, #1
 8003076:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800307a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800307e:	b2a4      	uxth	r4, r4
 8003080:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 8003084:	e5a1      	b.n	8002bca <USB_EPStartXfer+0x4c>
      if (ep->type == EP_TYPE_BULK)
 8003086:	78cb      	ldrb	r3, [r1, #3]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d004      	beq.n	8003096 <USB_EPStartXfer+0x518>
      else if (ep->type == EP_TYPE_ISOC)
 800308c:	2b01      	cmp	r3, #1
 800308e:	f000 808e 	beq.w	80031ae <USB_EPStartXfer+0x630>
        return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e5aa      	b.n	8002bec <USB_EPStartXfer+0x6e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003096:	b9aa      	cbnz	r2, 80030c4 <USB_EPStartXfer+0x546>
 8003098:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800309c:	4403      	add	r3, r0
 800309e:	780a      	ldrb	r2, [r1, #0]
 80030a0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80030a4:	690a      	ldr	r2, [r1, #16]
 80030a6:	bb3a      	cbnz	r2, 80030f8 <USB_EPStartXfer+0x57a>
 80030a8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80030ac:	b292      	uxth	r2, r2
 80030ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80030b8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80030bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030c0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80030c4:	784b      	ldrb	r3, [r1, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d148      	bne.n	800315c <USB_EPStartXfer+0x5de>
 80030ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030ce:	4403      	add	r3, r0
 80030d0:	780a      	ldrb	r2, [r1, #0]
 80030d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80030d6:	690a      	ldr	r2, [r1, #16]
 80030d8:	bb3a      	cbnz	r2, 800312a <USB_EPStartXfer+0x5ac>
 80030da:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80030de:	b292      	uxth	r2, r2
 80030e0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80030e4:	b292      	uxth	r2, r2
 80030e6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80030ea:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80030ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80030f6:	e033      	b.n	8003160 <USB_EPStartXfer+0x5e2>
 80030f8:	2a3e      	cmp	r2, #62	; 0x3e
 80030fa:	d809      	bhi.n	8003110 <USB_EPStartXfer+0x592>
 80030fc:	0854      	lsrs	r4, r2, #1
 80030fe:	f012 0f01 	tst.w	r2, #1
 8003102:	d000      	beq.n	8003106 <USB_EPStartXfer+0x588>
 8003104:	3401      	adds	r4, #1
 8003106:	02a2      	lsls	r2, r4, #10
 8003108:	b292      	uxth	r2, r2
 800310a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800310e:	e7d9      	b.n	80030c4 <USB_EPStartXfer+0x546>
 8003110:	0954      	lsrs	r4, r2, #5
 8003112:	f012 0f1f 	tst.w	r2, #31
 8003116:	d100      	bne.n	800311a <USB_EPStartXfer+0x59c>
 8003118:	3c01      	subs	r4, #1
 800311a:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 800311e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003122:	b292      	uxth	r2, r2
 8003124:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003128:	e7cc      	b.n	80030c4 <USB_EPStartXfer+0x546>
 800312a:	2a3e      	cmp	r2, #62	; 0x3e
 800312c:	d809      	bhi.n	8003142 <USB_EPStartXfer+0x5c4>
 800312e:	0854      	lsrs	r4, r2, #1
 8003130:	f012 0f01 	tst.w	r2, #1
 8003134:	d000      	beq.n	8003138 <USB_EPStartXfer+0x5ba>
 8003136:	3401      	adds	r4, #1
 8003138:	02a2      	lsls	r2, r4, #10
 800313a:	b292      	uxth	r2, r2
 800313c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003140:	e00e      	b.n	8003160 <USB_EPStartXfer+0x5e2>
 8003142:	0954      	lsrs	r4, r2, #5
 8003144:	f012 0f1f 	tst.w	r2, #31
 8003148:	d100      	bne.n	800314c <USB_EPStartXfer+0x5ce>
 800314a:	3c01      	subs	r4, #1
 800314c:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 8003150:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003154:	b292      	uxth	r2, r2
 8003156:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800315a:	e001      	b.n	8003160 <USB_EPStartXfer+0x5e2>
 800315c:	2b01      	cmp	r3, #1
 800315e:	d01c      	beq.n	800319a <USB_EPStartXfer+0x61c>
        if (ep->xfer_count != 0U)
 8003160:	69cb      	ldr	r3, [r1, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f43f ad31 	beq.w	8002bca <USB_EPStartXfer+0x4c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003168:	780a      	ldrb	r2, [r1, #0]
 800316a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800316e:	f244 0440 	movw	r4, #16448	; 0x4040
 8003172:	4023      	ands	r3, r4
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003174:	42a3      	cmp	r3, r4
 8003176:	d002      	beq.n	800317e <USB_EPStartXfer+0x600>
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ad26 	bne.w	8002bca <USB_EPStartXfer+0x4c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800317e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003194:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003198:	e517      	b.n	8002bca <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800319a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800319e:	4403      	add	r3, r0
 80031a0:	780a      	ldrb	r2, [r1, #0]
 80031a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80031a6:	8a0a      	ldrh	r2, [r1, #16]
 80031a8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80031ac:	e7d8      	b.n	8003160 <USB_EPStartXfer+0x5e2>
        if (ep->xfer_len > ep->maxpacket)
 80031ae:	698c      	ldr	r4, [r1, #24]
 80031b0:	690b      	ldr	r3, [r1, #16]
 80031b2:	429c      	cmp	r4, r3
 80031b4:	d930      	bls.n	8003218 <USB_EPStartXfer+0x69a>
          ep->xfer_len -= len;
 80031b6:	1ae4      	subs	r4, r4, r3
 80031b8:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80031ba:	b9a2      	cbnz	r2, 80031e6 <USB_EPStartXfer+0x668>
 80031bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031c0:	4402      	add	r2, r0
 80031c2:	780c      	ldrb	r4, [r1, #0]
 80031c4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80031c8:	bb53      	cbnz	r3, 8003220 <USB_EPStartXfer+0x6a2>
 80031ca:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80031ce:	b2a4      	uxth	r4, r4
 80031d0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80031d4:	b2a4      	uxth	r4, r4
 80031d6:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80031da:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80031de:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80031e2:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80031e6:	784a      	ldrb	r2, [r1, #1]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d14b      	bne.n	8003284 <USB_EPStartXfer+0x706>
 80031ec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031f0:	4402      	add	r2, r0
 80031f2:	780c      	ldrb	r4, [r1, #0]
 80031f4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80031f8:	bb5b      	cbnz	r3, 8003252 <USB_EPStartXfer+0x6d4>
 80031fa:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003204:	b29b      	uxth	r3, r3
 8003206:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800320a:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003216:	e4d8      	b.n	8002bca <USB_EPStartXfer+0x4c>
          ep->xfer_len = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	618b      	str	r3, [r1, #24]
          len = ep->xfer_len;
 800321c:	4623      	mov	r3, r4
 800321e:	e7cc      	b.n	80031ba <USB_EPStartXfer+0x63c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003220:	2b3e      	cmp	r3, #62	; 0x3e
 8003222:	d809      	bhi.n	8003238 <USB_EPStartXfer+0x6ba>
 8003224:	085c      	lsrs	r4, r3, #1
 8003226:	f013 0f01 	tst.w	r3, #1
 800322a:	d000      	beq.n	800322e <USB_EPStartXfer+0x6b0>
 800322c:	3401      	adds	r4, #1
 800322e:	02a4      	lsls	r4, r4, #10
 8003230:	b2a4      	uxth	r4, r4
 8003232:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003236:	e7d6      	b.n	80031e6 <USB_EPStartXfer+0x668>
 8003238:	095c      	lsrs	r4, r3, #5
 800323a:	f013 0f1f 	tst.w	r3, #31
 800323e:	d100      	bne.n	8003242 <USB_EPStartXfer+0x6c4>
 8003240:	3c01      	subs	r4, #1
 8003242:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003246:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800324a:	b2a4      	uxth	r4, r4
 800324c:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003250:	e7c9      	b.n	80031e6 <USB_EPStartXfer+0x668>
 8003252:	2b3e      	cmp	r3, #62	; 0x3e
 8003254:	d809      	bhi.n	800326a <USB_EPStartXfer+0x6ec>
 8003256:	085c      	lsrs	r4, r3, #1
 8003258:	f013 0f01 	tst.w	r3, #1
 800325c:	d000      	beq.n	8003260 <USB_EPStartXfer+0x6e2>
 800325e:	3401      	adds	r4, #1
 8003260:	02a3      	lsls	r3, r4, #10
 8003262:	b29b      	uxth	r3, r3
 8003264:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003268:	e4af      	b.n	8002bca <USB_EPStartXfer+0x4c>
 800326a:	095c      	lsrs	r4, r3, #5
 800326c:	f013 0f1f 	tst.w	r3, #31
 8003270:	d100      	bne.n	8003274 <USB_EPStartXfer+0x6f6>
 8003272:	3c01      	subs	r4, #1
 8003274:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8003278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327c:	b29b      	uxth	r3, r3
 800327e:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003282:	e4a2      	b.n	8002bca <USB_EPStartXfer+0x4c>
 8003284:	2a01      	cmp	r2, #1
 8003286:	f47f aca0 	bne.w	8002bca <USB_EPStartXfer+0x4c>
 800328a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800328e:	4402      	add	r2, r0
 8003290:	780c      	ldrb	r4, [r1, #0]
 8003292:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003296:	b29b      	uxth	r3, r3
 8003298:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800329c:	e495      	b.n	8002bca <USB_EPStartXfer+0x4c>

0800329e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800329e:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80032a0:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80032a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80032a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80032aa:	e007      	b.n	80032bc <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80032ac:	f832 4b04 	ldrh.w	r4, [r2], #4
 80032b0:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80032b2:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80032b4:	0a24      	lsrs	r4, r4, #8
 80032b6:	704c      	strb	r4, [r1, #1]
    pBuf++;
 80032b8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80032ba:	3d01      	subs	r5, #1
 80032bc:	2d00      	cmp	r5, #0
 80032be:	d1f5      	bne.n	80032ac <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80032c0:	f013 0f01 	tst.w	r3, #1
 80032c4:	d001      	beq.n	80032ca <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 80032c6:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80032c8:	700b      	strb	r3, [r1, #0]
  }
}
 80032ca:	bc30      	pop	{r4, r5}
 80032cc:	4770      	bx	lr

080032ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80032ce:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80032d0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80032d4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80032d8:	b15b      	cbz	r3, 80032f2 <USBD_CDC_EP0_RxReady+0x24>
 80032da:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80032de:	28ff      	cmp	r0, #255	; 0xff
 80032e0:	d007      	beq.n	80032f2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80032e8:	4621      	mov	r1, r4
 80032ea:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80032ec:	23ff      	movs	r3, #255	; 0xff
 80032ee:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80032f2:	2000      	movs	r0, #0
 80032f4:	bd10      	pop	{r4, pc}

080032f6 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80032f6:	2343      	movs	r3, #67	; 0x43
 80032f8:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80032fa:	f240 006c 	movw	r0, #108	; 0x6c
 80032fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003302:	4770      	bx	lr

08003304 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003304:	2343      	movs	r3, #67	; 0x43
 8003306:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003308:	f240 00b0 	movw	r0, #176	; 0xb0
 800330c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003310:	4770      	bx	lr

08003312 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003312:	2343      	movs	r3, #67	; 0x43
 8003314:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003316:	f240 1000 	movw	r0, #256	; 0x100
 800331a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800331e:	4770      	bx	lr

08003320 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003320:	230a      	movs	r3, #10
 8003322:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003324:	f240 00f4 	movw	r0, #244	; 0xf4
 8003328:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800332c:	4770      	bx	lr

0800332e <USBD_CDC_DataOut>:
{
 800332e:	b538      	push	{r3, r4, r5, lr}
 8003330:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003332:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003336:	f001 f8a0 	bl	800447a <USBD_LL_GetRxDataSize>
 800333a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800333e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003342:	b14b      	cbz	r3, 8003358 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003344:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800334e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003352:	4798      	blx	r3
    return USBD_OK;
 8003354:	2000      	movs	r0, #0
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003358:	2002      	movs	r0, #2
 800335a:	e7fc      	b.n	8003356 <USBD_CDC_DataOut+0x28>

0800335c <USBD_CDC_DataIn>:
{
 800335c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800335e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003362:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8003366:	b1fa      	cbz	r2, 80033a8 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003368:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800336c:	00a3      	lsls	r3, r4, #2
 800336e:	4403      	add	r3, r0
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	b14b      	cbz	r3, 8003388 <USBD_CDC_DataIn+0x2c>
 8003374:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8003378:	00f4      	lsls	r4, r6, #3
 800337a:	4425      	add	r5, r4
 800337c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800337e:	fbb3 f4f5 	udiv	r4, r3, r5
 8003382:	fb05 3314 	mls	r3, r5, r4, r3
 8003386:	b11b      	cbz	r3, 8003390 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003388:	2000      	movs	r0, #0
 800338a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003390:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003394:	0093      	lsls	r3, r2, #2
 8003396:	4403      	add	r3, r0
 8003398:	2400      	movs	r4, #0
 800339a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800339c:	4623      	mov	r3, r4
 800339e:	4622      	mov	r2, r4
 80033a0:	f001 f85b 	bl	800445a <USBD_LL_Transmit>
    return USBD_OK;
 80033a4:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80033a6:	e7f2      	b.n	800338e <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80033a8:	2002      	movs	r0, #2
 80033aa:	e7f0      	b.n	800338e <USBD_CDC_DataIn+0x32>

080033ac <USBD_CDC_Setup>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	4605      	mov	r5, r0
 80033b2:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80033b4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80033be:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033c2:	780b      	ldrb	r3, [r1, #0]
 80033c4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80033c8:	d027      	beq.n	800341a <USBD_CDC_Setup+0x6e>
 80033ca:	2a20      	cmp	r2, #32
 80033cc:	d156      	bne.n	800347c <USBD_CDC_Setup+0xd0>
      if (req->wLength)
 80033ce:	88ca      	ldrh	r2, [r1, #6]
 80033d0:	b93a      	cbnz	r2, 80033e2 <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80033d2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	7848      	ldrb	r0, [r1, #1]
 80033dc:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80033de:	2000      	movs	r0, #0
 80033e0:	e04f      	b.n	8003482 <USBD_CDC_Setup+0xd6>
        if (req->bmRequest & 0x80U)
 80033e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033e6:	d00c      	beq.n	8003402 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80033e8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4631      	mov	r1, r6
 80033f0:	7860      	ldrb	r0, [r4, #1]
 80033f2:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80033f4:	88e2      	ldrh	r2, [r4, #6]
 80033f6:	4631      	mov	r1, r6
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 fdb3 	bl	8003f64 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e03f      	b.n	8003482 <USBD_CDC_Setup+0xd6>
          hcdc->CmdOpCode = req->bRequest;
 8003402:	784b      	ldrb	r3, [r1, #1]
 8003404:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003408:	798b      	ldrb	r3, [r1, #6]
 800340a:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800340e:	88ca      	ldrh	r2, [r1, #6]
 8003410:	4631      	mov	r1, r6
 8003412:	f000 fdbc 	bl	8003f8e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003416:	2000      	movs	r0, #0
 8003418:	e033      	b.n	8003482 <USBD_CDC_Setup+0xd6>
      switch (req->bRequest)
 800341a:	784b      	ldrb	r3, [r1, #1]
 800341c:	2b0a      	cmp	r3, #10
 800341e:	d014      	beq.n	800344a <USBD_CDC_Setup+0x9e>
 8003420:	2b0b      	cmp	r3, #11
 8003422:	d021      	beq.n	8003468 <USBD_CDC_Setup+0xbc>
 8003424:	b11b      	cbz	r3, 800342e <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003426:	f000 fa77 	bl	8003918 <USBD_CtlError>
          ret = USBD_FAIL;
 800342a:	2002      	movs	r0, #2
          break;
 800342c:	e029      	b.n	8003482 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800342e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003432:	2b03      	cmp	r3, #3
 8003434:	d105      	bne.n	8003442 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003436:	2202      	movs	r2, #2
 8003438:	a901      	add	r1, sp, #4
 800343a:	f000 fd93 	bl	8003f64 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800343e:	2000      	movs	r0, #0
 8003440:	e01f      	b.n	8003482 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8003442:	f000 fa69 	bl	8003918 <USBD_CtlError>
            ret = USBD_FAIL;
 8003446:	2002      	movs	r0, #2
 8003448:	e01b      	b.n	8003482 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800344a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800344e:	2b03      	cmp	r3, #3
 8003450:	d106      	bne.n	8003460 <USBD_CDC_Setup+0xb4>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003452:	2201      	movs	r2, #1
 8003454:	f10d 0107 	add.w	r1, sp, #7
 8003458:	f000 fd84 	bl	8003f64 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800345c:	2000      	movs	r0, #0
 800345e:	e010      	b.n	8003482 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8003460:	f000 fa5a 	bl	8003918 <USBD_CtlError>
            ret = USBD_FAIL;
 8003464:	2002      	movs	r0, #2
 8003466:	e00c      	b.n	8003482 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003468:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800346c:	2b03      	cmp	r3, #3
 800346e:	d101      	bne.n	8003474 <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 8003470:	2000      	movs	r0, #0
 8003472:	e006      	b.n	8003482 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8003474:	f000 fa50 	bl	8003918 <USBD_CtlError>
            ret = USBD_FAIL;
 8003478:	2002      	movs	r0, #2
 800347a:	e002      	b.n	8003482 <USBD_CDC_Setup+0xd6>
      USBD_CtlError(pdev, req);
 800347c:	f000 fa4c 	bl	8003918 <USBD_CtlError>
      ret = USBD_FAIL;
 8003480:	2002      	movs	r0, #2
}
 8003482:	b002      	add	sp, #8
 8003484:	bd70      	pop	{r4, r5, r6, pc}

08003486 <USBD_CDC_DeInit>:
{
 8003486:	b538      	push	{r3, r4, r5, lr}
 8003488:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800348a:	2181      	movs	r1, #129	; 0x81
 800348c:	f000 ffae 	bl	80043ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003490:	2500      	movs	r5, #0
 8003492:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003494:	2101      	movs	r1, #1
 8003496:	4620      	mov	r0, r4
 8003498:	f000 ffa8 	bl	80043ec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800349c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80034a0:	2182      	movs	r1, #130	; 0x82
 80034a2:	4620      	mov	r0, r4
 80034a4:	f000 ffa2 	bl	80043ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80034a8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80034aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80034ae:	b14b      	cbz	r3, 80034c4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80034b0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80034b8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80034bc:	f000 ffe8 	bl	8004490 <USBD_static_free>
    pdev->pClassData = NULL;
 80034c0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80034c4:	2000      	movs	r0, #0
 80034c6:	bd38      	pop	{r3, r4, r5, pc}

080034c8 <USBD_CDC_Init>:
{
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034cc:	7c03      	ldrb	r3, [r0, #16]
 80034ce:	bba3      	cbnz	r3, 800353a <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80034d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d4:	2202      	movs	r2, #2
 80034d6:	2181      	movs	r1, #129	; 0x81
 80034d8:	f000 ff7d 	bl	80043d6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034dc:	2501      	movs	r5, #1
 80034de:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	2202      	movs	r2, #2
 80034e6:	4629      	mov	r1, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 ff74 	bl	80043d6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80034ee:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80034f2:	2308      	movs	r3, #8
 80034f4:	2203      	movs	r2, #3
 80034f6:	2182      	movs	r1, #130	; 0x82
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 ff6c 	bl	80043d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80034fe:	2301      	movs	r3, #1
 8003500:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003502:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003506:	f000 ffbe 	bl	8004486 <USBD_static_malloc>
 800350a:	4605      	mov	r5, r0
 800350c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003510:	b368      	cbz	r0, 800356e <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003512:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4798      	blx	r3
    hcdc->TxState = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003520:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003524:	7c23      	ldrb	r3, [r4, #16]
 8003526:	b1c3      	cbz	r3, 800355a <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003528:	2340      	movs	r3, #64	; 0x40
 800352a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800352e:	2101      	movs	r1, #1
 8003530:	4620      	mov	r0, r4
 8003532:	f000 ff9a 	bl	800446a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003536:	2000      	movs	r0, #0
}
 8003538:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	2202      	movs	r2, #2
 800353e:	2181      	movs	r1, #129	; 0x81
 8003540:	f000 ff49 	bl	80043d6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003544:	2501      	movs	r5, #1
 8003546:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003548:	2340      	movs	r3, #64	; 0x40
 800354a:	2202      	movs	r2, #2
 800354c:	4629      	mov	r1, r5
 800354e:	4620      	mov	r0, r4
 8003550:	f000 ff41 	bl	80043d6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003554:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003558:	e7cb      	b.n	80034f2 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800355a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003562:	2101      	movs	r1, #1
 8003564:	4620      	mov	r0, r4
 8003566:	f000 ff80 	bl	800446a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800356a:	2000      	movs	r0, #0
 800356c:	e7e4      	b.n	8003538 <USBD_CDC_Init+0x70>
    ret = 1U;
 800356e:	2001      	movs	r0, #1
 8003570:	e7e2      	b.n	8003538 <USBD_CDC_Init+0x70>

08003572 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003572:	b119      	cbz	r1, 800357c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003574:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003578:	2000      	movs	r0, #0
 800357a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800357c:	2002      	movs	r0, #2
  }

  return ret;
}
 800357e:	4770      	bx	lr

08003580 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003580:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003584:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003588:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003590:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003594:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr

0800359c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800359c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 80035a0:	b1a2      	cbz	r2, 80035cc <USBD_CDC_TransmitPacket+0x30>
{
 80035a2:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 80035a4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80035a8:	b10b      	cbz	r3, 80035ae <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80035aa:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80035ac:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80035b4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80035b8:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80035ba:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80035be:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80035c2:	2181      	movs	r1, #129	; 0x81
 80035c4:	f000 ff49 	bl	800445a <USBD_LL_Transmit>
      return USBD_OK;
 80035c8:	2000      	movs	r0, #0
 80035ca:	e7ef      	b.n	80035ac <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80035cc:	2002      	movs	r0, #2
}
 80035ce:	4770      	bx	lr

080035d0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80035d0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80035d4:	b19a      	cbz	r2, 80035fe <USBD_CDC_ReceivePacket+0x2e>
{
 80035d6:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035d8:	7c03      	ldrb	r3, [r0, #16]
 80035da:	b13b      	cbz	r3, 80035ec <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80035dc:	2340      	movs	r3, #64	; 0x40
 80035de:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80035e2:	2101      	movs	r1, #1
 80035e4:	f000 ff41 	bl	800446a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80035e8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80035ea:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80035ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80035f4:	2101      	movs	r1, #1
 80035f6:	f000 ff38 	bl	800446a <USBD_LL_PrepareReceive>
    return USBD_OK;
 80035fa:	2000      	movs	r0, #0
 80035fc:	e7f5      	b.n	80035ea <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80035fe:	2002      	movs	r0, #2
}
 8003600:	4770      	bx	lr

08003602 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003602:	b198      	cbz	r0, 800362c <USBD_Init+0x2a>
{
 8003604:	b508      	push	{r3, lr}
 8003606:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003608:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800360c:	b110      	cbz	r0, 8003614 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800360e:	2000      	movs	r0, #0
 8003610:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003614:	b109      	cbz	r1, 800361a <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003616:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 800361a:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800361c:	2301      	movs	r3, #1
 800361e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8003622:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003624:	f000 fe8b 	bl	800433e <USBD_LL_Init>

  return USBD_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800362c:	2002      	movs	r0, #2
}
 800362e:	4770      	bx	lr

08003630 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003630:	b119      	cbz	r1, 800363a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003632:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003636:	2000      	movs	r0, #0
 8003638:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800363a:	2002      	movs	r0, #2
  }

  return status;
}
 800363c:	4770      	bx	lr

0800363e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800363e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003640:	f000 fec1 	bl	80043c6 <USBD_LL_Start>

  return USBD_OK;
}
 8003644:	2000      	movs	r0, #0
 8003646:	bd08      	pop	{r3, pc}

08003648 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003648:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800364a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800364e:	b133      	cbz	r3, 800365e <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4798      	blx	r3
 8003654:	b908      	cbnz	r0, 800365a <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8003656:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8003658:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800365a:	2002      	movs	r0, #2
 800365c:	e7fc      	b.n	8003658 <USBD_SetClassConfig+0x10>
 800365e:	2002      	movs	r0, #2
 8003660:	e7fa      	b.n	8003658 <USBD_SetClassConfig+0x10>

08003662 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003662:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003664:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4798      	blx	r3

  return USBD_OK;
}
 800366c:	2000      	movs	r0, #0
 800366e:	bd08      	pop	{r3, pc}

08003670 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003674:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003678:	4628      	mov	r0, r5
 800367a:	f000 f939 	bl	80038f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800367e:	2301      	movs	r3, #1
 8003680:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003684:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003688:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800368c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003690:	f001 031f 	and.w	r3, r1, #31
 8003694:	2b01      	cmp	r3, #1
 8003696:	d00e      	beq.n	80036b6 <USBD_LL_SetupStage+0x46>
 8003698:	b13b      	cbz	r3, 80036aa <USBD_LL_SetupStage+0x3a>
 800369a:	2b02      	cmp	r3, #2
 800369c:	d010      	beq.n	80036c0 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800369e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 feaa 	bl	80043fc <USBD_LL_StallEP>
      break;
 80036a8:	e003      	b.n	80036b2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80036aa:	4629      	mov	r1, r5
 80036ac:	4620      	mov	r0, r4
 80036ae:	f000 fad2 	bl	8003c56 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80036b2:	2000      	movs	r0, #0
 80036b4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80036b6:	4629      	mov	r1, r5
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fb00 	bl	8003cbe <USBD_StdItfReq>
      break;
 80036be:	e7f8      	b.n	80036b2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80036c0:	4629      	mov	r1, r5
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 fb2b 	bl	8003d1e <USBD_StdEPReq>
      break;
 80036c8:	e7f3      	b.n	80036b2 <USBD_LL_SetupStage+0x42>

080036ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80036ca:	b538      	push	{r3, r4, r5, lr}
 80036cc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80036ce:	bba1      	cbnz	r1, 800373a <USBD_LL_DataOutStage+0x70>
 80036d0:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80036d2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d003      	beq.n	80036e2 <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d024      	beq.n	8003728 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80036de:	2000      	movs	r0, #0
 80036e0:	e037      	b.n	8003752 <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 80036e2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 80036e6:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90d      	bls.n	800370a <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d906      	bls.n	8003706 <USBD_LL_DataOutStage+0x3c>
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	4601      	mov	r1, r0
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fc55 	bl	8003fac <USBD_CtlContinueRx>
  return USBD_OK;
 8003702:	2000      	movs	r0, #0
 8003704:	e025      	b.n	8003752 <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 8003706:	b292      	uxth	r2, r2
 8003708:	e7f7      	b.n	80036fa <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800370a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	b12b      	cbz	r3, 800371e <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003712:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003716:	2a03      	cmp	r2, #3
 8003718:	d101      	bne.n	800371e <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 800371a:	4620      	mov	r0, r4
 800371c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800371e:	4620      	mov	r0, r4
 8003720:	f000 fc4c 	bl	8003fbc <USBD_CtlSendStatus>
  return USBD_OK;
 8003724:	2000      	movs	r0, #0
 8003726:	e014      	b.n	8003752 <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003728:	2500      	movs	r5, #0
 800372a:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800372e:	4629      	mov	r1, r5
 8003730:	4620      	mov	r0, r4
 8003732:	f000 fe63 	bl	80043fc <USBD_LL_StallEP>
  return USBD_OK;
 8003736:	4628      	mov	r0, r5
 8003738:	e00b      	b.n	8003752 <USBD_LL_DataOutStage+0x88>
 800373a:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 800373c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	b13b      	cbz	r3, 8003754 <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003744:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003748:	2903      	cmp	r1, #3
 800374a:	d105      	bne.n	8003758 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 800374c:	4611      	mov	r1, r2
 800374e:	4798      	blx	r3
  return USBD_OK;
 8003750:	2000      	movs	r0, #0
}
 8003752:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003754:	2002      	movs	r0, #2
 8003756:	e7fc      	b.n	8003752 <USBD_LL_DataOutStage+0x88>
 8003758:	2002      	movs	r0, #2
 800375a:	e7fa      	b.n	8003752 <USBD_LL_DataOutStage+0x88>

0800375c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800375c:	b510      	push	{r4, lr}
 800375e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003760:	2900      	cmp	r1, #0
 8003762:	d153      	bne.n	800380c <USBD_LL_DataInStage+0xb0>
 8003764:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003766:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800376a:	2b02      	cmp	r3, #2
 800376c:	d00c      	beq.n	8003788 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800376e:	2b04      	cmp	r3, #4
 8003770:	d000      	beq.n	8003774 <USBD_LL_DataInStage+0x18>
 8003772:	b91b      	cbnz	r3, 800377c <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	4620      	mov	r0, r4
 8003778:	f000 fe40 	bl	80043fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800377c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d03f      	beq.n	8003804 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003784:	2000      	movs	r0, #0
 8003786:	e04d      	b.n	8003824 <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 8003788:	6a23      	ldr	r3, [r4, #32]
 800378a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800378c:	4293      	cmp	r3, r2
 800378e:	d81d      	bhi.n	80037cc <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003790:	69e1      	ldr	r1, [r4, #28]
 8003792:	fbb1 f3f2 	udiv	r3, r1, r2
 8003796:	fb02 1313 	mls	r3, r2, r3, r1
 800379a:	b92b      	cbnz	r3, 80037a8 <USBD_LL_DataInStage+0x4c>
 800379c:	428a      	cmp	r2, r1
 800379e:	d803      	bhi.n	80037a8 <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 80037a0:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d31f      	bcc.n	80037e8 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80037a8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	b12b      	cbz	r3, 80037bc <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80037b0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80037b4:	2a03      	cmp	r2, #3
 80037b6:	d101      	bne.n	80037bc <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 80037b8:	4620      	mov	r0, r4
 80037ba:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	4620      	mov	r0, r4
 80037c0:	f000 fe1c 	bl	80043fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f000 fc04 	bl	8003fd2 <USBD_CtlReceiveStatus>
 80037ca:	e7d7      	b.n	800377c <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80037cc:	1a9a      	subs	r2, r3, r2
 80037ce:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80037d0:	b292      	uxth	r2, r2
 80037d2:	4601      	mov	r1, r0
 80037d4:	4620      	mov	r0, r4
 80037d6:	f000 fbd2 	bl	8003f7e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037da:	2300      	movs	r3, #0
 80037dc:	461a      	mov	r2, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 fe42 	bl	800446a <USBD_LL_PrepareReceive>
 80037e6:	e7c9      	b.n	800377c <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80037e8:	2200      	movs	r2, #0
 80037ea:	4611      	mov	r1, r2
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 fbc6 	bl	8003f7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80037f2:	2100      	movs	r1, #0
 80037f4:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037f8:	460b      	mov	r3, r1
 80037fa:	460a      	mov	r2, r1
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fe34 	bl	800446a <USBD_LL_PrepareReceive>
 8003802:	e7bb      	b.n	800377c <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 8003804:	2000      	movs	r0, #0
 8003806:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800380a:	e00b      	b.n	8003824 <USBD_LL_DataInStage+0xc8>
 800380c:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 800380e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	b13b      	cbz	r3, 8003826 <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003816:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800381a:	2903      	cmp	r1, #3
 800381c:	d105      	bne.n	800382a <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 800381e:	4611      	mov	r1, r2
 8003820:	4798      	blx	r3
  return USBD_OK;
 8003822:	2000      	movs	r0, #0
}
 8003824:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003826:	2002      	movs	r0, #2
 8003828:	e7fc      	b.n	8003824 <USBD_LL_DataInStage+0xc8>
 800382a:	2002      	movs	r0, #2
 800382c:	e7fa      	b.n	8003824 <USBD_LL_DataInStage+0xc8>

0800382e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	2200      	movs	r2, #0
 8003836:	4611      	mov	r1, r2
 8003838:	f000 fdcd 	bl	80043d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800383c:	2501      	movs	r5, #1
 800383e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003842:	2640      	movs	r6, #64	; 0x40
 8003844:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003848:	4633      	mov	r3, r6
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	4620      	mov	r0, r4
 8003850:	f000 fdc1 	bl	80043d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003854:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003856:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003858:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800385c:	2300      	movs	r3, #0
 800385e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003862:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003864:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8003868:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800386c:	b12b      	cbz	r3, 800387a <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800386e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2100      	movs	r1, #0
 8003876:	4620      	mov	r0, r4
 8003878:	4798      	blx	r3
  }

  return USBD_OK;
}
 800387a:	2000      	movs	r0, #0
 800387c:	bd70      	pop	{r4, r5, r6, pc}

0800387e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800387e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr

08003884 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003884:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003888:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800388c:	2304      	movs	r3, #4
 800388e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003892:	2000      	movs	r0, #0
 8003894:	4770      	bx	lr

08003896 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003896:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800389a:	2b04      	cmp	r3, #4
 800389c:	d001      	beq.n	80038a2 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800389e:	2000      	movs	r0, #0
 80038a0:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80038a2:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80038a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80038aa:	e7f8      	b.n	800389e <USBD_LL_Resume+0x8>

080038ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80038ac:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d001      	beq.n	80038ba <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80038b6:	2000      	movs	r0, #0
 80038b8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80038ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f8      	beq.n	80038b6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80038c4:	4798      	blx	r3
 80038c6:	e7f6      	b.n	80038b6 <USBD_LL_SOF+0xa>

080038c8 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80038c8:	2300      	movs	r3, #0

  while (*buf != '\0')
 80038ca:	e002      	b.n	80038d2 <USBD_GetLen+0xa>
  {
    len++;
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
    buf++;
 80038d0:	3001      	adds	r0, #1
  while (*buf != '\0')
 80038d2:	7802      	ldrb	r2, [r0, #0]
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	d1f9      	bne.n	80038cc <USBD_GetLen+0x4>
  }

  return len;
}
 80038d8:	4618      	mov	r0, r3
 80038da:	4770      	bx	lr

080038dc <USBD_SetFeature>:
{
 80038dc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80038de:	884b      	ldrh	r3, [r1, #2]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d000      	beq.n	80038e6 <USBD_SetFeature+0xa>
}
 80038e4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80038e6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80038ea:	f000 fb67 	bl	8003fbc <USBD_CtlSendStatus>
}
 80038ee:	e7f9      	b.n	80038e4 <USBD_SetFeature+0x8>

080038f0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80038f0:	780b      	ldrb	r3, [r1, #0]
 80038f2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80038f4:	784b      	ldrb	r3, [r1, #1]
 80038f6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80038f8:	788b      	ldrb	r3, [r1, #2]
 80038fa:	78ca      	ldrb	r2, [r1, #3]
 80038fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003900:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003902:	790b      	ldrb	r3, [r1, #4]
 8003904:	794a      	ldrb	r2, [r1, #5]
 8003906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800390a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800390c:	798b      	ldrb	r3, [r1, #6]
 800390e:	79ca      	ldrb	r2, [r1, #7]
 8003910:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003914:	80c3      	strh	r3, [r0, #6]
}
 8003916:	4770      	bx	lr

08003918 <USBD_CtlError>:
{
 8003918:	b510      	push	{r4, lr}
 800391a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	f000 fd6d 	bl	80043fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003922:	2100      	movs	r1, #0
 8003924:	4620      	mov	r0, r4
 8003926:	f000 fd69 	bl	80043fc <USBD_LL_StallEP>
}
 800392a:	bd10      	pop	{r4, pc}

0800392c <USBD_GetDescriptor>:
{
 800392c:	b530      	push	{r4, r5, lr}
 800392e:	b083      	sub	sp, #12
 8003930:	4605      	mov	r5, r0
 8003932:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800393a:	884a      	ldrh	r2, [r1, #2]
 800393c:	0a13      	lsrs	r3, r2, #8
 800393e:	3b01      	subs	r3, #1
 8003940:	2b06      	cmp	r3, #6
 8003942:	f200 80a4 	bhi.w	8003a8e <USBD_GetDescriptor+0x162>
 8003946:	e8df f003 	tbb	[pc, r3]
 800394a:	1804      	.short	0x1804
 800394c:	86a2a22c 	.word	0x86a2a22c
 8003950:	93          	.byte	0x93
 8003951:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003952:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f10d 0106 	add.w	r1, sp, #6
 800395c:	7c00      	ldrb	r0, [r0, #16]
 800395e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003960:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003964:	b11a      	cbz	r2, 800396e <USBD_GetDescriptor+0x42>
 8003966:	88e3      	ldrh	r3, [r4, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f040 8094 	bne.w	8003a96 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 800396e:	88e3      	ldrh	r3, [r4, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 809a 	beq.w	8003aaa <USBD_GetDescriptor+0x17e>
}
 8003976:	b003      	add	sp, #12
 8003978:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800397a:	7c03      	ldrb	r3, [r0, #16]
 800397c:	b943      	cbnz	r3, 8003990 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800397e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f10d 0006 	add.w	r0, sp, #6
 8003988:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800398a:	2302      	movs	r3, #2
 800398c:	7043      	strb	r3, [r0, #1]
 800398e:	e7e7      	b.n	8003960 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003990:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f10d 0006 	add.w	r0, sp, #6
 800399a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800399c:	2302      	movs	r3, #2
 800399e:	7043      	strb	r3, [r0, #1]
 80039a0:	e7de      	b.n	8003960 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	2a05      	cmp	r2, #5
 80039a6:	d852      	bhi.n	8003a4e <USBD_GetDescriptor+0x122>
 80039a8:	e8df f002 	tbb	[pc, r2]
 80039ac:	2a1d1003 	.word	0x2a1d1003
 80039b0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80039b2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	b123      	cbz	r3, 80039c4 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80039ba:	f10d 0106 	add.w	r1, sp, #6
 80039be:	7c00      	ldrb	r0, [r0, #16]
 80039c0:	4798      	blx	r3
 80039c2:	e7cd      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff ffa7 	bl	8003918 <USBD_CtlError>
 80039ca:	e7d4      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80039cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	b123      	cbz	r3, 80039de <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80039d4:	f10d 0106 	add.w	r1, sp, #6
 80039d8:	7c00      	ldrb	r0, [r0, #16]
 80039da:	4798      	blx	r3
 80039dc:	e7c0      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80039de:	4621      	mov	r1, r4
 80039e0:	f7ff ff9a 	bl	8003918 <USBD_CtlError>
 80039e4:	e7c7      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80039e6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	b123      	cbz	r3, 80039f8 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80039ee:	f10d 0106 	add.w	r1, sp, #6
 80039f2:	7c00      	ldrb	r0, [r0, #16]
 80039f4:	4798      	blx	r3
 80039f6:	e7b3      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80039f8:	4621      	mov	r1, r4
 80039fa:	f7ff ff8d 	bl	8003918 <USBD_CtlError>
 80039fe:	e7ba      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003a00:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	b123      	cbz	r3, 8003a12 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003a08:	f10d 0106 	add.w	r1, sp, #6
 8003a0c:	7c00      	ldrb	r0, [r0, #16]
 8003a0e:	4798      	blx	r3
 8003a10:	e7a6      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003a12:	4621      	mov	r1, r4
 8003a14:	f7ff ff80 	bl	8003918 <USBD_CtlError>
 8003a18:	e7ad      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003a1a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	b123      	cbz	r3, 8003a2c <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003a22:	f10d 0106 	add.w	r1, sp, #6
 8003a26:	7c00      	ldrb	r0, [r0, #16]
 8003a28:	4798      	blx	r3
 8003a2a:	e799      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	f7ff ff73 	bl	8003918 <USBD_CtlError>
 8003a32:	e7a0      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003a34:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	b123      	cbz	r3, 8003a46 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003a3c:	f10d 0106 	add.w	r1, sp, #6
 8003a40:	7c00      	ldrb	r0, [r0, #16]
 8003a42:	4798      	blx	r3
 8003a44:	e78c      	b.n	8003960 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003a46:	4621      	mov	r1, r4
 8003a48:	f7ff ff66 	bl	8003918 <USBD_CtlError>
 8003a4c:	e793      	b.n	8003976 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f7ff ff62 	bl	8003918 <USBD_CtlError>
 8003a54:	e78f      	b.n	8003976 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a56:	7c03      	ldrb	r3, [r0, #16]
 8003a58:	b933      	cbnz	r3, 8003a68 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003a5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	f10d 0006 	add.w	r0, sp, #6
 8003a64:	4798      	blx	r3
 8003a66:	e77b      	b.n	8003960 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7ff ff55 	bl	8003918 <USBD_CtlError>
 8003a6e:	e782      	b.n	8003976 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a70:	7c03      	ldrb	r3, [r0, #16]
 8003a72:	b943      	cbnz	r3, 8003a86 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003a74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f10d 0006 	add.w	r0, sp, #6
 8003a7e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a80:	2307      	movs	r3, #7
 8003a82:	7043      	strb	r3, [r0, #1]
 8003a84:	e76c      	b.n	8003960 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003a86:	4621      	mov	r1, r4
 8003a88:	f7ff ff46 	bl	8003918 <USBD_CtlError>
 8003a8c:	e773      	b.n	8003976 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8003a8e:	4621      	mov	r1, r4
 8003a90:	f7ff ff42 	bl	8003918 <USBD_CtlError>
 8003a94:	e76f      	b.n	8003976 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8003a96:	429a      	cmp	r2, r3
 8003a98:	bf28      	it	cs
 8003a9a:	461a      	movcs	r2, r3
 8003a9c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 fa5e 	bl	8003f64 <USBD_CtlSendData>
 8003aa8:	e761      	b.n	800396e <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fa86 	bl	8003fbc <USBD_CtlSendStatus>
 8003ab0:	e761      	b.n	8003976 <USBD_GetDescriptor+0x4a>

08003ab2 <USBD_SetAddress>:
{
 8003ab2:	b538      	push	{r3, r4, r5, lr}
 8003ab4:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003ab6:	888b      	ldrh	r3, [r1, #4]
 8003ab8:	b9f3      	cbnz	r3, 8003af8 <USBD_SetAddress+0x46>
 8003aba:	88cb      	ldrh	r3, [r1, #6]
 8003abc:	b9e3      	cbnz	r3, 8003af8 <USBD_SetAddress+0x46>
 8003abe:	884b      	ldrh	r3, [r1, #2]
 8003ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac2:	d819      	bhi.n	8003af8 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003ac4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ac8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d00c      	beq.n	8003aea <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8003ad0:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f000 fcb8 	bl	800444a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 fa6e 	bl	8003fbc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003ae0:	b135      	cbz	r5, 8003af0 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003ae8:	e009      	b.n	8003afe <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8003aea:	f7ff ff15 	bl	8003918 <USBD_CtlError>
 8003aee:	e006      	b.n	8003afe <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003af6:	e002      	b.n	8003afe <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff ff0d 	bl	8003918 <USBD_CtlError>
}
 8003afe:	bd38      	pop	{r3, r4, r5, pc}

08003b00 <USBD_SetConfig>:
{
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4604      	mov	r4, r0
 8003b04:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8003b06:	7889      	ldrb	r1, [r1, #2]
 8003b08:	f240 13c6 	movw	r3, #454	; 0x1c6
 8003b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b10:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003b12:	2901      	cmp	r1, #1
 8003b14:	d811      	bhi.n	8003b3a <USBD_SetConfig+0x3a>
    switch (pdev->dev_state)
 8003b16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d011      	beq.n	8003b42 <USBD_SetConfig+0x42>
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d024      	beq.n	8003b6c <USBD_SetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8003b22:	4629      	mov	r1, r5
 8003b24:	f7ff fef8 	bl	8003918 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003b28:	f240 13c6 	movw	r3, #454	; 0x1c6
 8003b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b30:	7819      	ldrb	r1, [r3, #0]
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7ff fd95 	bl	8003662 <USBD_ClrClassConfig>
        break;
 8003b38:	e002      	b.n	8003b40 <USBD_SetConfig+0x40>
    USBD_CtlError(pdev, req);
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7ff feec 	bl	8003918 <USBD_CtlError>
}
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8003b42:	b181      	cbz	r1, 8003b66 <USBD_SetConfig+0x66>
          pdev->dev_config = cfgidx;
 8003b44:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b46:	2303      	movs	r3, #3
 8003b48:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b4c:	f7ff fd7c 	bl	8003648 <USBD_SetClassConfig>
 8003b50:	2802      	cmp	r0, #2
 8003b52:	d003      	beq.n	8003b5c <USBD_SetConfig+0x5c>
          USBD_CtlSendStatus(pdev);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f000 fa31 	bl	8003fbc <USBD_CtlSendStatus>
 8003b5a:	e7f1      	b.n	8003b40 <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff feda 	bl	8003918 <USBD_CtlError>
            return;
 8003b64:	e7ec      	b.n	8003b40 <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8003b66:	f000 fa29 	bl	8003fbc <USBD_CtlSendStatus>
 8003b6a:	e7e9      	b.n	8003b40 <USBD_SetConfig+0x40>
        if (cfgidx == 0U)
 8003b6c:	b1a1      	cbz	r1, 8003b98 <USBD_SetConfig+0x98>
        else if (cfgidx != pdev->dev_config)
 8003b6e:	6843      	ldr	r3, [r0, #4]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d020      	beq.n	8003bb6 <USBD_SetConfig+0xb6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	f7ff fd74 	bl	8003662 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003b7a:	f240 13c6 	movw	r3, #454	; 0x1c6
 8003b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b82:	7819      	ldrb	r1, [r3, #0]
 8003b84:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7ff fd5e 	bl	8003648 <USBD_SetClassConfig>
 8003b8c:	2802      	cmp	r0, #2
 8003b8e:	d00d      	beq.n	8003bac <USBD_SetConfig+0xac>
          USBD_CtlSendStatus(pdev);
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fa13 	bl	8003fbc <USBD_CtlSendStatus>
 8003b96:	e7d3      	b.n	8003b40 <USBD_SetConfig+0x40>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8003b9e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003ba0:	f7ff fd5f 	bl	8003662 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 fa09 	bl	8003fbc <USBD_CtlSendStatus>
 8003baa:	e7c9      	b.n	8003b40 <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8003bac:	4629      	mov	r1, r5
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff feb2 	bl	8003918 <USBD_CtlError>
            return;
 8003bb4:	e7c4      	b.n	8003b40 <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8003bb6:	f000 fa01 	bl	8003fbc <USBD_CtlSendStatus>
 8003bba:	e7c1      	b.n	8003b40 <USBD_SetConfig+0x40>

08003bbc <USBD_GetConfig>:
{
 8003bbc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8003bbe:	88cb      	ldrh	r3, [r1, #6]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10b      	bne.n	8003bdc <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003bc4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003bc8:	b19b      	cbz	r3, 8003bf2 <USBD_GetConfig+0x36>
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d909      	bls.n	8003be2 <USBD_GetConfig+0x26>
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d10f      	bne.n	8003bf2 <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	1d01      	adds	r1, r0, #4
 8003bd6:	f000 f9c5 	bl	8003f64 <USBD_CtlSendData>
        break;
 8003bda:	e001      	b.n	8003be0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8003bdc:	f7ff fe9c 	bl	8003918 <USBD_CtlError>
}
 8003be0:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 8003be2:	4601      	mov	r1, r0
 8003be4:	2300      	movs	r3, #0
 8003be6:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003bea:	2201      	movs	r2, #1
 8003bec:	f000 f9ba 	bl	8003f64 <USBD_CtlSendData>
        break;
 8003bf0:	e7f6      	b.n	8003be0 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8003bf2:	f7ff fe91 	bl	8003918 <USBD_CtlError>
}
 8003bf6:	e7f3      	b.n	8003be0 <USBD_GetConfig+0x24>

08003bf8 <USBD_GetStatus>:
{
 8003bf8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003bfa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d812      	bhi.n	8003c2a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8003c04:	88cb      	ldrh	r3, [r1, #6]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d10c      	bne.n	8003c24 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003c0e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003c12:	b10b      	cbz	r3, 8003c18 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003c14:	2303      	movs	r3, #3
 8003c16:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f100 010c 	add.w	r1, r0, #12
 8003c1e:	f000 f9a1 	bl	8003f64 <USBD_CtlSendData>
}
 8003c22:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8003c24:	f7ff fe78 	bl	8003918 <USBD_CtlError>
        break;
 8003c28:	e7fb      	b.n	8003c22 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8003c2a:	f7ff fe75 	bl	8003918 <USBD_CtlError>
}
 8003c2e:	e7f8      	b.n	8003c22 <USBD_GetStatus+0x2a>

08003c30 <USBD_ClrFeature>:
{
 8003c30:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003c32:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d809      	bhi.n	8003c50 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c3c:	884b      	ldrh	r3, [r1, #2]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d000      	beq.n	8003c44 <USBD_ClrFeature+0x14>
}
 8003c42:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8003c4a:	f000 f9b7 	bl	8003fbc <USBD_CtlSendStatus>
 8003c4e:	e7f8      	b.n	8003c42 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8003c50:	f7ff fe62 	bl	8003918 <USBD_CtlError>
}
 8003c54:	e7f5      	b.n	8003c42 <USBD_ClrFeature+0x12>

08003c56 <USBD_StdDevReq>:
{
 8003c56:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c58:	780b      	ldrb	r3, [r1, #0]
 8003c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d005      	beq.n	8003c6e <USBD_StdDevReq+0x18>
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d003      	beq.n	8003c6e <USBD_StdDevReq+0x18>
 8003c66:	b143      	cbz	r3, 8003c7a <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8003c68:	f7ff fe56 	bl	8003918 <USBD_CtlError>
      break;
 8003c6c:	e003      	b.n	8003c76 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8003c6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4798      	blx	r3
}
 8003c76:	2000      	movs	r0, #0
 8003c78:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8003c7a:	784b      	ldrb	r3, [r1, #1]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d81b      	bhi.n	8003cb8 <USBD_StdDevReq+0x62>
 8003c80:	e8df f003 	tbb	[pc, r3]
 8003c84:	141a1711 	.word	0x141a1711
 8003c88:	1a05081a 	.word	0x1a05081a
 8003c8c:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 8003c8e:	f7ff fe4d 	bl	800392c <USBD_GetDescriptor>
          break;
 8003c92:	e7f0      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8003c94:	f7ff ff0d 	bl	8003ab2 <USBD_SetAddress>
          break;
 8003c98:	e7ed      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8003c9a:	f7ff ff31 	bl	8003b00 <USBD_SetConfig>
          break;
 8003c9e:	e7ea      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8003ca0:	f7ff ff8c 	bl	8003bbc <USBD_GetConfig>
          break;
 8003ca4:	e7e7      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8003ca6:	f7ff ffa7 	bl	8003bf8 <USBD_GetStatus>
          break;
 8003caa:	e7e4      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8003cac:	f7ff fe16 	bl	80038dc <USBD_SetFeature>
          break;
 8003cb0:	e7e1      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8003cb2:	f7ff ffbd 	bl	8003c30 <USBD_ClrFeature>
          break;
 8003cb6:	e7de      	b.n	8003c76 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8003cb8:	f7ff fe2e 	bl	8003918 <USBD_CtlError>
          break;
 8003cbc:	e7db      	b.n	8003c76 <USBD_StdDevReq+0x20>

08003cbe <USBD_StdItfReq>:
{
 8003cbe:	b538      	push	{r3, r4, r5, lr}
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cc4:	780b      	ldrb	r3, [r1, #0]
 8003cc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d006      	beq.n	8003cdc <USBD_StdItfReq+0x1e>
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d004      	beq.n	8003cdc <USBD_StdItfReq+0x1e>
 8003cd2:	b11b      	cbz	r3, 8003cdc <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8003cd4:	f7ff fe20 	bl	8003918 <USBD_CtlError>
}
 8003cd8:	2000      	movs	r0, #0
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8003cdc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d816      	bhi.n	8003d14 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003ce6:	7923      	ldrb	r3, [r4, #4]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d80e      	bhi.n	8003d0a <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003cec:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003cf8:	88e3      	ldrh	r3, [r4, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ec      	bne.n	8003cd8 <USBD_StdItfReq+0x1a>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1ea      	bne.n	8003cd8 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 f95a 	bl	8003fbc <USBD_CtlSendStatus>
 8003d08:	e7e6      	b.n	8003cd8 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f7ff fe03 	bl	8003918 <USBD_CtlError>
 8003d12:	e7e1      	b.n	8003cd8 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8003d14:	4621      	mov	r1, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7ff fdfe 	bl	8003918 <USBD_CtlError>
          break;
 8003d1c:	e7dc      	b.n	8003cd8 <USBD_StdItfReq+0x1a>

08003d1e <USBD_StdEPReq>:
{
 8003d1e:	b538      	push	{r3, r4, r5, lr}
 8003d20:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8003d22:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d24:	780b      	ldrb	r3, [r1, #0]
 8003d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d008      	beq.n	8003d40 <USBD_StdEPReq+0x22>
 8003d2e:	b2d0      	uxtb	r0, r2
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d005      	beq.n	8003d40 <USBD_StdEPReq+0x22>
 8003d34:	b15b      	cbz	r3, 8003d4e <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7ff fdee 	bl	8003918 <USBD_CtlError>
  return ret;
 8003d3c:	2000      	movs	r0, #0
      break;
 8003d3e:	e005      	b.n	8003d4c <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8003d40:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4620      	mov	r0, r4
 8003d48:	4798      	blx	r3
  return ret;
 8003d4a:	2000      	movs	r0, #0
}
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d105      	bne.n	8003d5e <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d52:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4798      	blx	r3
        return ret;
 8003d5c:	e7f6      	b.n	8003d4c <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 8003d5e:	784b      	ldrb	r3, [r1, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d032      	beq.n	8003dca <USBD_StdEPReq+0xac>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05e      	beq.n	8003e26 <USBD_StdEPReq+0x108>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	f040 80d8 	bne.w	8003f1e <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 8003d6e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d006      	beq.n	8003d84 <USBD_StdEPReq+0x66>
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d016      	beq.n	8003da8 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff fdcc 	bl	8003918 <USBD_CtlError>
  return ret;
 8003d80:	2000      	movs	r0, #0
              break;
 8003d82:	e7e3      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003d84:	b108      	cbz	r0, 8003d8a <USBD_StdEPReq+0x6c>
 8003d86:	2880      	cmp	r0, #128	; 0x80
 8003d88:	d104      	bne.n	8003d94 <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fdc4 	bl	8003918 <USBD_CtlError>
  return ret;
 8003d90:	2000      	movs	r0, #0
 8003d92:	e7db      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8003d94:	4601      	mov	r1, r0
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 fb30 	bl	80043fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 fb2c 	bl	80043fc <USBD_LL_StallEP>
  return ret;
 8003da4:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8003da6:	e7d1      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003da8:	884b      	ldrh	r3, [r1, #2]
 8003daa:	b923      	cbnz	r3, 8003db6 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8003dac:	b118      	cbz	r0, 8003db6 <USBD_StdEPReq+0x98>
 8003dae:	2880      	cmp	r0, #128	; 0x80
 8003db0:	d001      	beq.n	8003db6 <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003db2:	88cb      	ldrh	r3, [r1, #6]
 8003db4:	b123      	cbz	r3, 8003dc0 <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 f900 	bl	8003fbc <USBD_CtlSendStatus>
  return ret;
 8003dbc:	2000      	movs	r0, #0
              break;
 8003dbe:	e7c5      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003dc0:	4601      	mov	r1, r0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 fb1a 	bl	80043fc <USBD_LL_StallEP>
 8003dc8:	e7f5      	b.n	8003db6 <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 8003dca:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d006      	beq.n	8003de0 <USBD_StdEPReq+0xc2>
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d016      	beq.n	8003e04 <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff fd9e 	bl	8003918 <USBD_CtlError>
  return ret;
 8003ddc:	2000      	movs	r0, #0
              break;
 8003dde:	e7b5      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003de0:	b108      	cbz	r0, 8003de6 <USBD_StdEPReq+0xc8>
 8003de2:	2880      	cmp	r0, #128	; 0x80
 8003de4:	d104      	bne.n	8003df0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff fd96 	bl	8003918 <USBD_CtlError>
  return ret;
 8003dec:	2000      	movs	r0, #0
 8003dee:	e7ad      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8003df0:	4601      	mov	r1, r0
 8003df2:	4620      	mov	r0, r4
 8003df4:	f000 fb02 	bl	80043fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f000 fafe 	bl	80043fc <USBD_LL_StallEP>
  return ret;
 8003e00:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8003e02:	e7a3      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003e04:	884b      	ldrh	r3, [r1, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 808e 	bne.w	8003f28 <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003e0c:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003e10:	d104      	bne.n	8003e1c <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f8d2 	bl	8003fbc <USBD_CtlSendStatus>
  return ret;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e797      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003e1c:	4601      	mov	r1, r0
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f000 faf4 	bl	800440c <USBD_LL_ClearStallEP>
 8003e24:	e7f5      	b.n	8003e12 <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 8003e26:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d006      	beq.n	8003e3c <USBD_StdEPReq+0x11e>
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d02a      	beq.n	8003e88 <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff fd70 	bl	8003918 <USBD_CtlError>
  return ret;
 8003e38:	2000      	movs	r0, #0
              break;
 8003e3a:	e787      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e3c:	b108      	cbz	r0, 8003e42 <USBD_StdEPReq+0x124>
 8003e3e:	2880      	cmp	r0, #128	; 0x80
 8003e40:	d113      	bne.n	8003e6a <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e42:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e46:	d115      	bne.n	8003e74 <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003e48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e50:	0083      	lsls	r3, r0, #2
 8003e52:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8003e56:	4421      	add	r1, r4
 8003e58:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8003e5a:	2500      	movs	r5, #0
 8003e5c:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 f87f 	bl	8003f64 <USBD_CtlSendData>
  return ret;
 8003e66:	4628      	mov	r0, r5
              break;
 8003e68:	e770      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7ff fd54 	bl	8003918 <USBD_CtlError>
  return ret;
 8003e70:	2000      	movs	r0, #0
                break;
 8003e72:	e76b      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e74:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e7c:	0083      	lsls	r3, r0, #2
 8003e7e:	f103 0110 	add.w	r1, r3, #16
 8003e82:	4421      	add	r1, r4
 8003e84:	3104      	adds	r1, #4
 8003e86:	e7e8      	b.n	8003e5a <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 8003e88:	b252      	sxtb	r2, r2
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	db1f      	blt.n	8003ece <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003e8e:	f000 030f 	and.w	r3, r0, #15
 8003e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e96:	009d      	lsls	r5, r3, #2
 8003e98:	4425      	add	r5, r4
 8003e9a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8003e9e:	b323      	cbz	r3, 8003eea <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	db27      	blt.n	8003ef4 <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003ea4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ea8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003eac:	0093      	lsls	r3, r2, #2
 8003eae:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8003eb2:	4425      	add	r5, r4
 8003eb4:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003eb6:	b108      	cbz	r0, 8003ebc <USBD_StdEPReq+0x19e>
 8003eb8:	2880      	cmp	r0, #128	; 0x80
 8003eba:	d125      	bne.n	8003f08 <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 f84d 	bl	8003f64 <USBD_CtlSendData>
  return ret;
 8003eca:	2000      	movs	r0, #0
              break;
 8003ecc:	e73e      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003ece:	f000 030f 	and.w	r3, r0, #15
 8003ed2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ed6:	009d      	lsls	r5, r3, #2
 8003ed8:	4425      	add	r5, r4
 8003eda:	69ab      	ldr	r3, [r5, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1df      	bne.n	8003ea0 <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff fd19 	bl	8003918 <USBD_CtlError>
  return ret;
 8003ee6:	2000      	movs	r0, #0
                  break;
 8003ee8:	e730      	b.n	8003d4c <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff fd14 	bl	8003918 <USBD_CtlError>
  return ret;
 8003ef0:	2000      	movs	r0, #0
                  break;
 8003ef2:	e72b      	b.n	8003d4c <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ef4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003ef8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003efc:	0093      	lsls	r3, r2, #2
 8003efe:	f103 0510 	add.w	r5, r3, #16
 8003f02:	4425      	add	r5, r4
 8003f04:	3504      	adds	r5, #4
 8003f06:	e7d6      	b.n	8003eb6 <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003f08:	4601      	mov	r1, r0
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fa86 	bl	800441c <USBD_LL_IsStallEP>
 8003f10:	b110      	cbz	r0, 8003f18 <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 8003f12:	2301      	movs	r3, #1
 8003f14:	602b      	str	r3, [r5, #0]
 8003f16:	e7d3      	b.n	8003ec0 <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	e7d0      	b.n	8003ec0 <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fcfa 	bl	8003918 <USBD_CtlError>
  return ret;
 8003f24:	2000      	movs	r0, #0
          break;
 8003f26:	e711      	b.n	8003d4c <USBD_StdEPReq+0x2e>
  return ret;
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e70f      	b.n	8003d4c <USBD_StdEPReq+0x2e>

08003f2c <USBD_GetString>:
  if (desc != NULL)
 8003f2c:	b1c8      	cbz	r0, 8003f62 <USBD_GetString+0x36>
{
 8003f2e:	b570      	push	{r4, r5, r6, lr}
 8003f30:	460d      	mov	r5, r1
 8003f32:	4616      	mov	r6, r2
 8003f34:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003f36:	f7ff fcc7 	bl	80038c8 <USBD_GetLen>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	0040      	lsls	r0, r0, #1
 8003f3e:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003f40:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003f42:	2303      	movs	r3, #3
 8003f44:	706b      	strb	r3, [r5, #1]
 8003f46:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003f48:	e007      	b.n	8003f5a <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8003f4a:	3401      	adds	r4, #1
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8003f52:	3302      	adds	r3, #2
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2100      	movs	r1, #0
 8003f58:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8003f5a:	7821      	ldrb	r1, [r4, #0]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d1f4      	bne.n	8003f4a <USBD_GetString+0x1e>
}
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
 8003f62:	4770      	bx	lr

08003f64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003f6e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8003f70:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003f72:	460a      	mov	r2, r1
 8003f74:	2100      	movs	r1, #0
 8003f76:	f000 fa70 	bl	800445a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003f7e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003f80:	4613      	mov	r3, r2
 8003f82:	460a      	mov	r2, r1
 8003f84:	2100      	movs	r1, #0
 8003f86:	f000 fa68 	bl	800445a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	bd08      	pop	{r3, pc}

08003f8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003f92:	2203      	movs	r2, #3
 8003f94:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003f98:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8003f9c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f000 fa61 	bl	800446a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	bd10      	pop	{r4, pc}

08003fac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003fac:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003fae:	4613      	mov	r3, r2
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f000 fa59 	bl	800446a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bd08      	pop	{r3, pc}

08003fbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003fbc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f000 fa46 	bl	800445a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003fce:	2000      	movs	r0, #0
 8003fd0:	bd08      	pop	{r3, pc}

08003fd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003fd2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003fd4:	2305      	movs	r3, #5
 8003fd6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f000 fa43 	bl	800446a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	bd08      	pop	{r3, pc}

08003fe8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003fea:	2200      	movs	r2, #0
 8003fec:	f240 1154 	movw	r1, #340	; 0x154
 8003ff0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003ff4:	f240 4034 	movw	r0, #1076	; 0x434
 8003ff8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ffc:	f7ff fb01 	bl	8003602 <USBD_Init>
 8004000:	b9e8      	cbnz	r0, 800403e <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004002:	f240 0134 	movw	r1, #52	; 0x34
 8004006:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800400a:	f240 4034 	movw	r0, #1076	; 0x434
 800400e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004012:	f7ff fb0d 	bl	8003630 <USBD_RegisterClass>
 8004016:	b9a8      	cbnz	r0, 8004044 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004018:	f240 1144 	movw	r1, #324	; 0x144
 800401c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004020:	f240 4034 	movw	r0, #1076	; 0x434
 8004024:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004028:	f7ff faa3 	bl	8003572 <USBD_CDC_RegisterInterface>
 800402c:	b968      	cbnz	r0, 800404a <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800402e:	f240 4034 	movw	r0, #1076	; 0x434
 8004032:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004036:	f7ff fb02 	bl	800363e <USBD_Start>
 800403a:	b948      	cbnz	r0, 8004050 <MX_USB_DEVICE_Init+0x68>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800403c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800403e:	f7fc f9b5 	bl	80003ac <Error_Handler>
 8004042:	e7de      	b.n	8004002 <MX_USB_DEVICE_Init+0x1a>
    Error_Handler();
 8004044:	f7fc f9b2 	bl	80003ac <Error_Handler>
 8004048:	e7e6      	b.n	8004018 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 800404a:	f7fc f9af 	bl	80003ac <Error_Handler>
 800404e:	e7ee      	b.n	800402e <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
 8004050:	f7fc f9ac 	bl	80003ac <Error_Handler>
}
 8004054:	e7f2      	b.n	800403c <MX_USB_DEVICE_Init+0x54>

08004056 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004056:	2000      	movs	r0, #0
 8004058:	4770      	bx	lr

0800405a <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr

0800405e <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800405e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004060:	f240 4434 	movw	r4, #1076	; 0x434
 8004064:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004068:	4601      	mov	r1, r0
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff fa90 	bl	8003590 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff faad 	bl	80035d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004076:	2000      	movs	r0, #0
 8004078:	bd10      	pop	{r4, pc}

0800407a <CDC_Init_FS>:
{
 800407a:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800407c:	f240 4434 	movw	r4, #1076	; 0x434
 8004080:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004084:	2200      	movs	r2, #0
 8004086:	f640 21e0 	movw	r1, #2784	; 0xae0
 800408a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800408e:	4620      	mov	r0, r4
 8004090:	f7ff fa76 	bl	8003580 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004094:	f240 61f8 	movw	r1, #1784	; 0x6f8
 8004098:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800409c:	4620      	mov	r0, r4
 800409e:	f7ff fa77 	bl	8003590 <USBD_CDC_SetRxBuffer>
}
 80040a2:	2000      	movs	r0, #0
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80040a6:	f240 4334 	movw	r3, #1076	; 0x434
 80040aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80040b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040b6:	b10b      	cbz	r3, 80040bc <CDC_Transmit_FS+0x16>
    return USBD_BUSY;
 80040b8:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80040ba:	4770      	bx	lr
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	460a      	mov	r2, r1
 80040c0:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80040c2:	f240 4434 	movw	r4, #1076	; 0x434
 80040c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff fa58 	bl	8003580 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff fa63 	bl	800359c <USBD_CDC_TransmitPacket>
}
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80040d8:	2312      	movs	r3, #18
 80040da:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80040dc:	f240 1070 	movw	r0, #368	; 0x170
 80040e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040e4:	4770      	bx	lr

080040e6 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80040e6:	2304      	movs	r3, #4
 80040e8:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80040ea:	f240 1084 	movw	r0, #388	; 0x184
 80040ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80040f2:	4770      	bx	lr

080040f4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d216      	bcs.n	8004128 <IntToUnicode+0x34>
{
 80040fa:	b430      	push	{r4, r5}
 80040fc:	e00b      	b.n	8004116 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80040fe:	3437      	adds	r4, #55	; 0x37
 8004100:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004104:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004106:	005c      	lsls	r4, r3, #1
 8004108:	3401      	adds	r4, #1
 800410a:	2500      	movs	r5, #0
 800410c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800410e:	3301      	adds	r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4293      	cmp	r3, r2
 8004114:	d206      	bcs.n	8004124 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8004116:	0f04      	lsrs	r4, r0, #28
 8004118:	2c09      	cmp	r4, #9
 800411a:	d8f0      	bhi.n	80040fe <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800411c:	3430      	adds	r4, #48	; 0x30
 800411e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8004122:	e7ef      	b.n	8004104 <IntToUnicode+0x10>
  }
}
 8004124:	bc30      	pop	{r4, r5}
 8004126:	4770      	bx	lr
 8004128:	4770      	bx	lr

0800412a <Get_SerialNum>:
{
 800412a:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800412c:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 8004130:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8004134:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004136:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 800413a:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800413e:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004140:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 8004144:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8004148:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800414a:	18c0      	adds	r0, r0, r3
 800414c:	d100      	bne.n	8004150 <Get_SerialNum+0x26>
}
 800414e:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004150:	f240 1488 	movw	r4, #392	; 0x188
 8004154:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004158:	2208      	movs	r2, #8
 800415a:	1ca1      	adds	r1, r4, #2
 800415c:	f7ff ffca 	bl	80040f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004160:	2204      	movs	r2, #4
 8004162:	f104 0112 	add.w	r1, r4, #18
 8004166:	4628      	mov	r0, r5
 8004168:	f7ff ffc4 	bl	80040f4 <IntToUnicode>
}
 800416c:	e7ef      	b.n	800414e <Get_SerialNum+0x24>

0800416e <USBD_FS_SerialStrDescriptor>:
{
 800416e:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004170:	231a      	movs	r3, #26
 8004172:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004174:	f7ff ffd9 	bl	800412a <Get_SerialNum>
}
 8004178:	f240 1088 	movw	r0, #392	; 0x188
 800417c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004180:	bd08      	pop	{r3, pc}

08004182 <USBD_FS_ProductStrDescriptor>:
{
 8004182:	b508      	push	{r3, lr}
 8004184:	460a      	mov	r2, r1
  if(speed == 0)
 8004186:	b170      	cbz	r0, 80041a6 <USBD_FS_ProductStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004188:	f640 61c8 	movw	r1, #3784	; 0xec8
 800418c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004190:	f244 6044 	movw	r0, #17988	; 0x4644
 8004194:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004198:	f7ff fec8 	bl	8003f2c <USBD_GetString>
}
 800419c:	f640 60c8 	movw	r0, #3784	; 0xec8
 80041a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041a4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80041a6:	f640 61c8 	movw	r1, #3784	; 0xec8
 80041aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80041ae:	f244 6044 	movw	r0, #17988	; 0x4644
 80041b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80041b6:	f7ff feb9 	bl	8003f2c <USBD_GetString>
 80041ba:	e7ef      	b.n	800419c <USBD_FS_ProductStrDescriptor+0x1a>

080041bc <USBD_FS_ManufacturerStrDescriptor>:
{
 80041bc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80041be:	f640 64c8 	movw	r4, #3784	; 0xec8
 80041c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80041c6:	460a      	mov	r2, r1
 80041c8:	4621      	mov	r1, r4
 80041ca:	f244 6038 	movw	r0, #17976	; 0x4638
 80041ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80041d2:	f7ff feab 	bl	8003f2c <USBD_GetString>
}
 80041d6:	4620      	mov	r0, r4
 80041d8:	bd10      	pop	{r4, pc}

080041da <USBD_FS_ConfigStrDescriptor>:
{
 80041da:	b508      	push	{r3, lr}
 80041dc:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80041de:	b170      	cbz	r0, 80041fe <USBD_FS_ConfigStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80041e0:	f640 61c8 	movw	r1, #3784	; 0xec8
 80041e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80041e8:	f244 601c 	movw	r0, #17948	; 0x461c
 80041ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80041f0:	f7ff fe9c 	bl	8003f2c <USBD_GetString>
}
 80041f4:	f640 60c8 	movw	r0, #3784	; 0xec8
 80041f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041fc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80041fe:	f640 61c8 	movw	r1, #3784	; 0xec8
 8004202:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004206:	f244 601c 	movw	r0, #17948	; 0x461c
 800420a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800420e:	f7ff fe8d 	bl	8003f2c <USBD_GetString>
 8004212:	e7ef      	b.n	80041f4 <USBD_FS_ConfigStrDescriptor+0x1a>

08004214 <USBD_FS_InterfaceStrDescriptor>:
{
 8004214:	b508      	push	{r3, lr}
 8004216:	460a      	mov	r2, r1
  if(speed == 0)
 8004218:	b170      	cbz	r0, 8004238 <USBD_FS_InterfaceStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800421a:	f640 61c8 	movw	r1, #3784	; 0xec8
 800421e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004222:	f244 6028 	movw	r0, #17960	; 0x4628
 8004226:	f6c0 0000 	movt	r0, #2048	; 0x800
 800422a:	f7ff fe7f 	bl	8003f2c <USBD_GetString>
}
 800422e:	f640 60c8 	movw	r0, #3784	; 0xec8
 8004232:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004236:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004238:	f640 61c8 	movw	r1, #3784	; 0xec8
 800423c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004240:	f244 6028 	movw	r0, #17960	; 0x4628
 8004244:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004248:	f7ff fe70 	bl	8003f2c <USBD_GetString>
 800424c:	e7ef      	b.n	800422e <USBD_FS_InterfaceStrDescriptor+0x1a>

0800424e <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800424e:	b118      	cbz	r0, 8004258 <USBD_Get_USB_Status+0xa>
 8004250:	2802      	cmp	r0, #2
 8004252:	d003      	beq.n	800425c <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004254:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004256:	4770      	bx	lr
      usb_status = USBD_OK;
 8004258:	2000      	movs	r0, #0
 800425a:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800425c:	2001      	movs	r0, #1
    break;
 800425e:	4770      	bx	lr

08004260 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004266:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800426a:	429a      	cmp	r2, r3
 800426c:	d000      	beq.n	8004270 <HAL_PCD_MspInit+0x10>
 800426e:	4770      	bx	lr
{
 8004270:	b500      	push	{lr}
 8004272:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8004274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004282:	61da      	str	r2, [r3, #28]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	4611      	mov	r1, r2
 8004292:	2014      	movs	r0, #20
 8004294:	f7fc fa0e 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004298:	2014      	movs	r0, #20
 800429a:	f7fc fa41 	bl	8000720 <HAL_NVIC_EnableIRQ>
}
 800429e:	b003      	add	sp, #12
 80042a0:	f85d fb04 	ldr.w	pc, [sp], #4

080042a4 <HAL_PCD_SetupStageCallback>:
{
 80042a4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80042a6:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80042aa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042ae:	f7ff f9df 	bl	8003670 <USBD_LL_SetupStage>
}
 80042b2:	bd08      	pop	{r3, pc}

080042b4 <HAL_PCD_DataOutStageCallback>:
{
 80042b4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80042b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80042ba:	00d3      	lsls	r3, r2, #3
 80042bc:	4403      	add	r3, r0
 80042be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80042c2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042c6:	f7ff fa00 	bl	80036ca <USBD_LL_DataOutStage>
}
 80042ca:	bd08      	pop	{r3, pc}

080042cc <HAL_PCD_DataInStageCallback>:
{
 80042cc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80042ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80042d2:	00d3      	lsls	r3, r2, #3
 80042d4:	4403      	add	r3, r0
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042dc:	f7ff fa3e 	bl	800375c <USBD_LL_DataInStage>
}
 80042e0:	bd08      	pop	{r3, pc}

080042e2 <HAL_PCD_SOFCallback>:
{
 80042e2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80042e4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042e8:	f7ff fae0 	bl	80038ac <USBD_LL_SOF>
}
 80042ec:	bd08      	pop	{r3, pc}

080042ee <HAL_PCD_ResetCallback>:
{
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80042f2:	6883      	ldr	r3, [r0, #8]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d001      	beq.n	80042fc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80042f8:	f7fc f858 	bl	80003ac <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80042fc:	2101      	movs	r1, #1
 80042fe:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004302:	f7ff fabc 	bl	800387e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004306:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800430a:	f7ff fa90 	bl	800382e <USBD_LL_Reset>
}
 800430e:	bd10      	pop	{r4, pc}

08004310 <HAL_PCD_SuspendCallback>:
{
 8004310:	b510      	push	{r4, lr}
 8004312:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004314:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004318:	f7ff fab4 	bl	8003884 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800431c:	69a3      	ldr	r3, [r4, #24]
 800431e:	b13b      	cbz	r3, 8004330 <HAL_PCD_SuspendCallback+0x20>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004320:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004324:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	f042 0206 	orr.w	r2, r2, #6
 800432e:	611a      	str	r2, [r3, #16]
}
 8004330:	bd10      	pop	{r4, pc}

08004332 <HAL_PCD_ResumeCallback>:
{
 8004332:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004334:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004338:	f7ff faad 	bl	8003896 <USBD_LL_Resume>
}
 800433c:	bd08      	pop	{r3, pc}

0800433e <USBD_LL_Init>:
{
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004342:	f241 00c8 	movw	r0, #4296	; 0x10c8
 8004346:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800434a:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800434e:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8004352:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004356:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800435a:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800435c:	2308      	movs	r3, #8
 800435e:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004360:	2302      	movs	r3, #2
 8004362:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004368:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800436a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800436c:	f7fc fbab 	bl	8000ac6 <HAL_PCD_Init>
 8004370:	bb30      	cbnz	r0, 80043c0 <USBD_LL_Init+0x82>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004372:	2318      	movs	r3, #24
 8004374:	2200      	movs	r2, #0
 8004376:	4611      	mov	r1, r2
 8004378:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800437c:	f7fd f9d2 	bl	8001724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004380:	2358      	movs	r3, #88	; 0x58
 8004382:	2200      	movs	r2, #0
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800438a:	f7fd f9cb 	bl	8001724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800438e:	23c0      	movs	r3, #192	; 0xc0
 8004390:	2200      	movs	r2, #0
 8004392:	2181      	movs	r1, #129	; 0x81
 8004394:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004398:	f7fd f9c4 	bl	8001724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800439c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80043a0:	2200      	movs	r2, #0
 80043a2:	2101      	movs	r1, #1
 80043a4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043a8:	f7fd f9bc 	bl	8001724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80043ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b0:	2200      	movs	r2, #0
 80043b2:	2182      	movs	r1, #130	; 0x82
 80043b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043b8:	f7fd f9b4 	bl	8001724 <HAL_PCDEx_PMAConfig>
}
 80043bc:	2000      	movs	r0, #0
 80043be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80043c0:	f7fb fff4 	bl	80003ac <Error_Handler>
 80043c4:	e7d5      	b.n	8004372 <USBD_LL_Init+0x34>

080043c6 <USBD_LL_Start>:
{
 80043c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80043c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80043cc:	f7fc fc01 	bl	8000bd2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043d0:	f7ff ff3d 	bl	800424e <USBD_Get_USB_Status>
}
 80043d4:	bd08      	pop	{r3, pc}

080043d6 <USBD_LL_OpenEP>:
{
 80043d6:	b510      	push	{r4, lr}
 80043d8:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80043da:	4613      	mov	r3, r2
 80043dc:	4622      	mov	r2, r4
 80043de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80043e2:	f7fd f870 	bl	80014c6 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043e6:	f7ff ff32 	bl	800424e <USBD_Get_USB_Status>
}
 80043ea:	bd10      	pop	{r4, pc}

080043ec <USBD_LL_CloseEP>:
{
 80043ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80043ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80043f2:	f7fd f8a2 	bl	800153a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043f6:	f7ff ff2a 	bl	800424e <USBD_Get_USB_Status>
}
 80043fa:	bd08      	pop	{r3, pc}

080043fc <USBD_LL_StallEP>:
{
 80043fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80043fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004402:	f7fd f91a 	bl	800163a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004406:	f7ff ff22 	bl	800424e <USBD_Get_USB_Status>
}
 800440a:	bd08      	pop	{r3, pc}

0800440c <USBD_LL_ClearStallEP>:
{
 800440c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800440e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004412:	f7fd f94d 	bl	80016b0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004416:	f7ff ff1a 	bl	800424e <USBD_Get_USB_Status>
}
 800441a:	bd08      	pop	{r3, pc}

0800441c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800441c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004420:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004424:	d108      	bne.n	8004438 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004426:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800442a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800442e:	00ca      	lsls	r2, r1, #3
 8004430:	4413      	add	r3, r2
 8004432:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8004436:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004438:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800443c:	3101      	adds	r1, #1
 800443e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004442:	00ca      	lsls	r2, r1, #3
 8004444:	4413      	add	r3, r2
 8004446:	7898      	ldrb	r0, [r3, #2]
 8004448:	4770      	bx	lr

0800444a <USBD_LL_SetUSBAddress>:
{
 800444a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800444c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004450:	f7fc ff3e 	bl	80012d0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004454:	f7ff fefb 	bl	800424e <USBD_Get_USB_Status>
}
 8004458:	bd08      	pop	{r3, pc}

0800445a <USBD_LL_Transmit>:
{
 800445a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800445c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004460:	f7fd f8c6 	bl	80015f0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004464:	f7ff fef3 	bl	800424e <USBD_Get_USB_Status>
}
 8004468:	bd08      	pop	{r3, pc}

0800446a <USBD_LL_PrepareReceive>:
{
 800446a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800446c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004470:	f7fd f894 	bl	800159c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004474:	f7ff feeb 	bl	800424e <USBD_Get_USB_Status>
}
 8004478:	bd08      	pop	{r3, pc}

0800447a <USBD_LL_GetRxDataSize>:
{
 800447a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800447c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004480:	f7fd f8ad 	bl	80015de <HAL_PCD_EP_GetRxCount>
}
 8004484:	bd08      	pop	{r3, pc}

08004486 <USBD_static_malloc>:
}
 8004486:	f240 10c8 	movw	r0, #456	; 0x1c8
 800448a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800448e:	4770      	bx	lr

08004490 <USBD_static_free>:
}
 8004490:	4770      	bx	lr

08004492 <HAL_PCDEx_SetConnectionState>:
}
 8004492:	4770      	bx	lr

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	2500      	movs	r5, #0
 8004498:	4e0c      	ldr	r6, [pc, #48]	; (80044cc <__libc_init_array+0x38>)
 800449a:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449c:	1ba4      	subs	r4, r4, r6
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	42a5      	cmp	r5, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	f000 f88a 	bl	80045bc <_init>
 80044a8:	2500      	movs	r5, #0
 80044aa:	4e0a      	ldr	r6, [pc, #40]	; (80044d4 <__libc_init_array+0x40>)
 80044ac:	4c0a      	ldr	r4, [pc, #40]	; (80044d8 <__libc_init_array+0x44>)
 80044ae:	1ba4      	subs	r4, r4, r6
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	42a5      	cmp	r5, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044bc:	4798      	blx	r3
 80044be:	3501      	adds	r5, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c6:	4798      	blx	r3
 80044c8:	3501      	adds	r5, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	0800467c 	.word	0x0800467c
 80044d0:	0800467c 	.word	0x0800467c
 80044d4:	0800467c 	.word	0x0800467c
 80044d8:	08004680 	.word	0x08004680

080044dc <__itoa>:
 80044dc:	1e93      	subs	r3, r2, #2
 80044de:	2b22      	cmp	r3, #34	; 0x22
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	d904      	bls.n	80044f0 <__itoa+0x14>
 80044e6:	2300      	movs	r3, #0
 80044e8:	461c      	mov	r4, r3
 80044ea:	700b      	strb	r3, [r1, #0]
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd10      	pop	{r4, pc}
 80044f0:	2a0a      	cmp	r2, #10
 80044f2:	d109      	bne.n	8004508 <__itoa+0x2c>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	da07      	bge.n	8004508 <__itoa+0x2c>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	700b      	strb	r3, [r1, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	4240      	negs	r0, r0
 8004500:	4421      	add	r1, r4
 8004502:	f000 f81d 	bl	8004540 <__utoa>
 8004506:	e7f1      	b.n	80044ec <__itoa+0x10>
 8004508:	2100      	movs	r1, #0
 800450a:	e7f9      	b.n	8004500 <__itoa+0x24>

0800450c <itoa>:
 800450c:	f7ff bfe6 	b.w	80044dc <__itoa>

08004510 <memset>:
 8004510:	4603      	mov	r3, r0
 8004512:	4402      	add	r2, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <strcat>:
 8004520:	4603      	mov	r3, r0
 8004522:	b510      	push	{r4, lr}
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	1c5c      	adds	r4, r3, #1
 8004528:	b93a      	cbnz	r2, 800453a <strcat+0x1a>
 800452a:	3b01      	subs	r3, #1
 800452c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004530:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004534:	2a00      	cmp	r2, #0
 8004536:	d1f9      	bne.n	800452c <strcat+0xc>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	4623      	mov	r3, r4
 800453c:	e7f2      	b.n	8004524 <strcat+0x4>
	...

08004540 <__utoa>:
 8004540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004542:	b08b      	sub	sp, #44	; 0x2c
 8004544:	4605      	mov	r5, r0
 8004546:	460c      	mov	r4, r1
 8004548:	466e      	mov	r6, sp
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <__utoa+0x78>)
 800454c:	f103 0c20 	add.w	ip, r3, #32
 8004550:	4637      	mov	r7, r6
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	3308      	adds	r3, #8
 8004558:	c703      	stmia	r7!, {r0, r1}
 800455a:	4563      	cmp	r3, ip
 800455c:	463e      	mov	r6, r7
 800455e:	d1f7      	bne.n	8004550 <__utoa+0x10>
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	791b      	ldrb	r3, [r3, #4]
 8004564:	6038      	str	r0, [r7, #0]
 8004566:	713b      	strb	r3, [r7, #4]
 8004568:	1e93      	subs	r3, r2, #2
 800456a:	2b22      	cmp	r3, #34	; 0x22
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	d904      	bls.n	800457c <__utoa+0x3c>
 8004572:	7023      	strb	r3, [r4, #0]
 8004574:	461c      	mov	r4, r3
 8004576:	4620      	mov	r0, r4
 8004578:	b00b      	add	sp, #44	; 0x2c
 800457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800457c:	1e66      	subs	r6, r4, #1
 800457e:	fbb5 f0f2 	udiv	r0, r5, r2
 8004582:	fb02 5510 	mls	r5, r2, r0, r5
 8004586:	af0a      	add	r7, sp, #40	; 0x28
 8004588:	443d      	add	r5, r7
 800458a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004594:	4605      	mov	r5, r0
 8004596:	b968      	cbnz	r0, 80045b4 <__utoa+0x74>
 8004598:	4622      	mov	r2, r4
 800459a:	5460      	strb	r0, [r4, r1]
 800459c:	4423      	add	r3, r4
 800459e:	1b19      	subs	r1, r3, r4
 80045a0:	1b10      	subs	r0, r2, r4
 80045a2:	4281      	cmp	r1, r0
 80045a4:	dde7      	ble.n	8004576 <__utoa+0x36>
 80045a6:	7811      	ldrb	r1, [r2, #0]
 80045a8:	7818      	ldrb	r0, [r3, #0]
 80045aa:	f802 0b01 	strb.w	r0, [r2], #1
 80045ae:	f803 1901 	strb.w	r1, [r3], #-1
 80045b2:	e7f4      	b.n	800459e <__utoa+0x5e>
 80045b4:	460b      	mov	r3, r1
 80045b6:	e7e2      	b.n	800457e <__utoa+0x3e>
 80045b8:	08004654 	.word	0x08004654

080045bc <_init>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr

080045c8 <_fini>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	bf00      	nop
 80045cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ce:	bc08      	pop	{r3}
 80045d0:	469e      	mov	lr, r3
 80045d2:	4770      	bx	lr
